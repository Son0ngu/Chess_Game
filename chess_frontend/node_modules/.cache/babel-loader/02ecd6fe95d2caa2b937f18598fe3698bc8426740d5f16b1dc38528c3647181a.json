{"ast":null,"code":"import { io } from \"socket.io-client\";\n\n// Read from environment variables or use default\nconst SOCKET_URL = process.env.REACT_APP_SOCKET_URL || \"http://localhost:5000\";\n\n// Connection options\nconst options = {\n  transports: [\"websocket\"],\n  reconnectionAttempts: 5,\n  reconnectionDelay: 1000,\n  autoConnect: true,\n  auth: {\n    token: localStorage.getItem('token')\n  }\n};\n\n// Create socket instance\nconst socket = io(SOCKET_URL, options);\n\n// Connection event handlers\nsocket.on(\"connect\", () => {\n  console.log(\"Connected to server, Socket ID:\", socket.id);\n});\nsocket.on(\"connect_error\", error => {\n  console.error(\"Connection error:\", error.message);\n});\nsocket.on(\"disconnect\", reason => {\n  console.log(\"Disconnected from server:\", reason);\n\n  // If the server disconnected us, try to reconnect\n  if (reason === \"io server disconnect\") {\n    socket.connect();\n  }\n});\n\n// Update auth token when it changes\nexport const updateSocketAuth = () => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    socket.auth = {\n      token\n    };\n    // If already connected, update the auth and reconnect\n    if (socket.connected) {\n      socket.disconnect().connect();\n    }\n  }\n};\nexport default socket;","map":{"version":3,"names":["io","SOCKET_URL","process","env","REACT_APP_SOCKET_URL","options","transports","reconnectionAttempts","reconnectionDelay","autoConnect","auth","token","localStorage","getItem","socket","on","console","log","id","error","message","reason","connect","updateSocketAuth","connected","disconnect"],"sources":["C:/Users/sonbx/Chess_Game/chess_frontend/src/socket/socket.js"],"sourcesContent":["import { io } from \"socket.io-client\";\r\n\r\n// Read from environment variables or use default\r\nconst SOCKET_URL = process.env.REACT_APP_SOCKET_URL || \"http://localhost:5000\";\r\n\r\n// Connection options\r\nconst options = {\r\n  transports: [\"websocket\"],\r\n  reconnectionAttempts: 5,\r\n  reconnectionDelay: 1000,\r\n  autoConnect: true,\r\n  auth: {\r\n    token: localStorage.getItem('token')\r\n  }\r\n};\r\n\r\n// Create socket instance\r\nconst socket = io(SOCKET_URL, options);\r\n\r\n// Connection event handlers\r\nsocket.on(\"connect\", () => {\r\n  console.log(\"Connected to server, Socket ID:\", socket.id);\r\n});\r\n\r\nsocket.on(\"connect_error\", (error) => {\r\n  console.error(\"Connection error:\", error.message);\r\n});\r\n\r\nsocket.on(\"disconnect\", (reason) => {\r\n  console.log(\"Disconnected from server:\", reason);\r\n  \r\n  // If the server disconnected us, try to reconnect\r\n  if (reason === \"io server disconnect\") {\r\n    socket.connect();\r\n  }\r\n});\r\n\r\n// Update auth token when it changes\r\nexport const updateSocketAuth = () => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    socket.auth = { token };\r\n    // If already connected, update the auth and reconnect\r\n    if (socket.connected) {\r\n      socket.disconnect().connect();\r\n    }\r\n  }\r\n};\r\n\r\nexport default socket;\r\n"],"mappings":"AAAA,SAASA,EAAE,QAAQ,kBAAkB;;AAErC;AACA,MAAMC,UAAU,GAAGC,OAAO,CAACC,GAAG,CAACC,oBAAoB,IAAI,uBAAuB;;AAE9E;AACA,MAAMC,OAAO,GAAG;EACdC,UAAU,EAAE,CAAC,WAAW,CAAC;EACzBC,oBAAoB,EAAE,CAAC;EACvBC,iBAAiB,EAAE,IAAI;EACvBC,WAAW,EAAE,IAAI;EACjBC,IAAI,EAAE;IACJC,KAAK,EAAEC,YAAY,CAACC,OAAO,CAAC,OAAO;EACrC;AACF,CAAC;;AAED;AACA,MAAMC,MAAM,GAAGd,EAAE,CAACC,UAAU,EAAEI,OAAO,CAAC;;AAEtC;AACAS,MAAM,CAACC,EAAE,CAAC,SAAS,EAAE,MAAM;EACzBC,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEH,MAAM,CAACI,EAAE,CAAC;AAC3D,CAAC,CAAC;AAEFJ,MAAM,CAACC,EAAE,CAAC,eAAe,EAAGI,KAAK,IAAK;EACpCH,OAAO,CAACG,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAACC,OAAO,CAAC;AACnD,CAAC,CAAC;AAEFN,MAAM,CAACC,EAAE,CAAC,YAAY,EAAGM,MAAM,IAAK;EAClCL,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEI,MAAM,CAAC;;EAEhD;EACA,IAAIA,MAAM,KAAK,sBAAsB,EAAE;IACrCP,MAAM,CAACQ,OAAO,CAAC,CAAC;EAClB;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EACpC,MAAMZ,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTG,MAAM,CAACJ,IAAI,GAAG;MAAEC;IAAM,CAAC;IACvB;IACA,IAAIG,MAAM,CAACU,SAAS,EAAE;MACpBV,MAAM,CAACW,UAAU,CAAC,CAAC,CAACH,OAAO,CAAC,CAAC;IAC/B;EACF;AACF,CAAC;AAED,eAAeR,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}