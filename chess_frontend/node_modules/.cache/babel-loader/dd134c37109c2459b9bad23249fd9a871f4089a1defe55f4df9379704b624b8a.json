{"ast":null,"code":"var _s = $RefreshSig$();\n// src/pages/PasswordRecovery.jsx\nimport React, { useState } from \"react\";\nimport { useNavigate, Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport \"../styles/Signin.css\"; // Tận dụng luôn CSS từ SignIn\n\nconst API_URL = \"http://localhost:5000\"; // Đổi nếu cần\n\nconst PasswordRecovery = () => {\n  _s();\n  const navigate = useNavigate();\n  const [email, setEmail] = useState(\"\");\n  const [errors, setErrors] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [serverMessage, setServerMessage] = useState({\n    type: \"\",\n    text: \"\"\n  });\n  const validateForm = () => {\n    const newErrors = {};\n    if (!email.trim()) {\n      newErrors.email = \"Email is required\";\n    }\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!validateForm()) return;\n    setIsLoading(true);\n    setServerMessage({\n      type: \"\",\n      text: \"\"\n    });\n    try {\n      console.log(\"Sending password recovery request with:\", email);\n      const response = await axios.post(`${API_URL}/auth/recover`, {\n        email\n      });\n      console.log(\"Recovery response received:\", response.data);\n      if (response.data && response.data.message) {\n        setServerMessage({\n          type: \"success\",\n          text: response.data.message || \"Recovery email sent! Check your inbox.\"\n        });\n      } else {\n        throw new Error(\"Invalid response format\");\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error(\"Recovery error:\", error);\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || \"Recovery failed. Please try again.\";\n      setServerMessage({\n        type: \"error\",\n        text: errorMessage\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n};\n_s(PasswordRecovery, \"EXuAU6Kmjl2YkI1Ko9wysaHL2jQ=\", false, function () {\n  return [useNavigate];\n});\n_c = PasswordRecovery;\nexport default PWRec;\nvar _c;\n$RefreshReg$(_c, \"PasswordRecovery\");","map":{"version":3,"names":["React","useState","useNavigate","Link","axios","API_URL","PasswordRecovery","_s","navigate","email","setEmail","errors","setErrors","isLoading","setIsLoading","serverMessage","setServerMessage","type","text","validateForm","newErrors","trim","Object","keys","length","handleSubmit","e","preventDefault","console","log","response","post","data","message","Error","error","_error$response","_error$response$data","errorMessage","_c","PWRec","$RefreshReg$"],"sources":["E:/ĐH/20242/Secure Web Dev/Project_Chess/Chess_Game/chess_frontend/src/pages/PWRec.jsx"],"sourcesContent":["// src/pages/PasswordRecovery.jsx\r\nimport React, { useState } from \"react\";\r\nimport { useNavigate, Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport \"../styles/Signin.css\"; // Tận dụng luôn CSS từ SignIn\r\n\r\nconst API_URL = \"http://localhost:5000\"; // Đổi nếu cần\r\n\r\nconst PasswordRecovery = () => {\r\n  const navigate = useNavigate();\r\n  const [email, setEmail] = useState(\"\");\r\n  const [errors, setErrors] = useState({});\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [serverMessage, setServerMessage] = useState({ type: \"\", text: \"\" });\r\n\r\n  const validateForm = () => {\r\n    const newErrors = {};\r\n    if (!email.trim()) {\r\n      newErrors.email = \"Email is required\";\r\n    }\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!validateForm()) return;\r\n\r\n    setIsLoading(true);\r\n    setServerMessage({ type: \"\", text: \"\" });\r\n\r\n    try {\r\n      console.log(\"Sending password recovery request with:\", email);\r\n      const response = await axios.post(`${API_URL}/auth/recover`, { email });\r\n      console.log(\"Recovery response received:\", response.data);\r\n\r\n      if (response.data && response.data.message) {\r\n        setServerMessage({ \r\n          type: \"success\", \r\n          text: response.data.message || \"Recovery email sent! Check your inbox.\" \r\n        });\r\n      } else {\r\n        throw new Error(\"Invalid response format\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Recovery error:\", error);\r\n      const errorMessage = error.response?.data?.error || \"Recovery failed. Please try again.\";\r\n      setServerMessage({ \r\n        type: \"error\", \r\n        text: errorMessage \r\n      });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  \r\n};\r\n\r\nexport default PWRec;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}