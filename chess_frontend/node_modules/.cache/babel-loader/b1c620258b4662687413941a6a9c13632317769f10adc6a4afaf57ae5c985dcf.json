{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sonbx\\\\Chess_Game\\\\chess_frontend\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\nimport { getToken, setToken, removeToken, getUserId, setUserId, removeUserId } from '../utils/storage';\nimport { connectSocket, disconnectSocket } from '../services/socket';\n\n// API base URL - fixed to match your backend routes\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = \"http://localhost:5000\";\n\n// Create context\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Check for existing token on initial load\n  useEffect(() => {\n    const initializeAuth = async () => {\n      const token = getToken();\n      const userId = getUserId();\n      if (token && userId) {\n        try {\n          // Configure axios to use the token\n          axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n          // Fetch user profile using the stored token\n          // Changed from /api/users/profile/:userId to /auth/profile\n          const response = await axios.get(`${API_URL}/auth/profile`);\n          if (response.data) {\n            setUser(response.data);\n            setIsAuthenticated(true);\n            // Connect socket with authentication\n            connectSocket();\n          }\n        } catch (error) {\n          console.error(\"Error validating token:\", error);\n          // Invalid or expired token\n          logout();\n        }\n      }\n      setIsLoading(false);\n    };\n    initializeAuth();\n  }, []);\n\n  // Updated login function that can handle both direct credentials or user data object\n  const login = async loginData => {\n    try {\n      setError(null);\n      setIsLoading(true);\n\n      // If loginData already contains token and user (from successful API response)\n      if (loginData && loginData.token && loginData.user) {\n        const {\n          token,\n          user\n        } = loginData;\n\n        // Save token and user ID to storage\n        setToken(token);\n        setUserId(user.id || user._id); // Handle both id formats\n\n        // Set authorization header\n        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n        // Update state\n        setUser(user);\n        setIsAuthenticated(true);\n\n        // Connect socket with authentication\n        connectSocket();\n        return user;\n      } else {\n        // Regular login flow (when credentials are provided)\n        let response;\n        if (typeof loginData === 'object' && loginData.username) {\n          // If it's an object with username, it contains credentials\n          response = await axios.post(`${API_URL}/auth/login`, loginData);\n        } else if (arguments.length >= 2) {\n          // If two separate arguments (username, password) were provided\n          const [username, password] = arguments;\n          response = await axios.post(`${API_URL}/auth/login`, {\n            username,\n            password\n          });\n        } else {\n          throw new Error(\"Invalid login parameters\");\n        }\n        const {\n          token,\n          user\n        } = response.data;\n\n        // Save token and user ID to storage\n        setToken(token);\n        setUserId(user.id || user._id); // Handle both id formats\n\n        // Set authorization header\n        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n        // Update state\n        setUser(user);\n        setIsAuthenticated(true);\n\n        // Connect socket with authentication\n        connectSocket();\n        return user;\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || \"Login failed. Please check your credentials.\";\n      setError(message);\n      throw new Error(message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Register function - updated endpoint\n  const register = async (username, email, password) => {\n    try {\n      setError(null);\n      setIsLoading(true);\n\n      // Changed from /api/users/register to /auth/register\n      const response = await axios.post(`${API_URL}/auth/register`, {\n        username,\n        email,\n        password\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      const message = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || \"Registration failed. Please try again.\";\n      setError(message);\n      throw new Error(message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    // Remove token from storage\n    removeToken();\n    removeUserId();\n\n    // Remove authorization header\n    delete axios.defaults.headers.common['Authorization'];\n\n    // Update state\n    setUser(null);\n    setIsAuthenticated(false);\n\n    // Disconnect socket\n    disconnectSocket();\n  };\n\n  // Update user profile - updated endpoint\n  const updateProfile = async userData => {\n    try {\n      setIsLoading(true);\n      // Changed from /api/users/profile/:userId to /auth/profile\n      const response = await axios.put(`${API_URL}/auth/profile`, userData);\n      if (response.data) {\n        setUser({\n          ...user,\n          ...response.data\n        });\n      }\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      const message = ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || \"Failed to update profile.\";\n      setError(message);\n      throw new Error(message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Context value\n  const value = {\n    user,\n    isAuthenticated,\n    isLoading,\n    error,\n    login,\n    logout,\n    register,\n    updateProfile\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use the auth context\n_s(AuthProvider, \"FjMZAxZvphMxP/TGOt3ewSdLoU4=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","axios","getToken","setToken","removeToken","getUserId","setUserId","removeUserId","connectSocket","disconnectSocket","jsxDEV","_jsxDEV","API_URL","AuthContext","AuthProvider","children","_s","user","setUser","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","error","setError","initializeAuth","token","userId","defaults","headers","common","response","get","data","console","logout","login","loginData","id","_id","username","post","arguments","length","password","Error","_error$response","_error$response$data","message","register","email","_error$response2","_error$response2$data","updateProfile","userData","put","_error$response3","_error$response3$data","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["C:/Users/sonbx/Chess_Game/chess_frontend/src/context/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { getToken, setToken, removeToken, getUserId, setUserId, removeUserId } from '../utils/storage';\r\nimport { connectSocket, disconnectSocket } from '../services/socket';\r\n\r\n// API base URL - fixed to match your backend routes\r\nconst API_URL = \"http://localhost:5000\";\r\n\r\n// Create context\r\nconst AuthContext = createContext(null);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Check for existing token on initial load\r\n  useEffect(() => {\r\n    const initializeAuth = async () => {\r\n      const token = getToken();\r\n      const userId = getUserId();\r\n      \r\n      if (token && userId) {\r\n        try {\r\n          // Configure axios to use the token\r\n          axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n          \r\n          // Fetch user profile using the stored token\r\n          // Changed from /api/users/profile/:userId to /auth/profile\r\n          const response = await axios.get(`${API_URL}/auth/profile`);\r\n          \r\n          if (response.data) {\r\n            setUser(response.data);\r\n            setIsAuthenticated(true);\r\n            // Connect socket with authentication\r\n            connectSocket();\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error validating token:\", error);\r\n          // Invalid or expired token\r\n          logout();\r\n        }\r\n      }\r\n      \r\n      setIsLoading(false);\r\n    };\r\n\r\n    initializeAuth();\r\n  }, []);\r\n\r\n  // Updated login function that can handle both direct credentials or user data object\r\n  const login = async (loginData) => {\r\n    try {\r\n      setError(null);\r\n      setIsLoading(true);\r\n      \r\n      // If loginData already contains token and user (from successful API response)\r\n      if (loginData && loginData.token && loginData.user) {\r\n        const { token, user } = loginData;\r\n        \r\n        // Save token and user ID to storage\r\n        setToken(token);\r\n        setUserId(user.id || user._id); // Handle both id formats\r\n        \r\n        // Set authorization header\r\n        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n        \r\n        // Update state\r\n        setUser(user);\r\n        setIsAuthenticated(true);\r\n        \r\n        // Connect socket with authentication\r\n        connectSocket();\r\n        \r\n        return user;\r\n      } else {\r\n        // Regular login flow (when credentials are provided)\r\n        let response;\r\n        \r\n        if (typeof loginData === 'object' && loginData.username) {\r\n          // If it's an object with username, it contains credentials\r\n          response = await axios.post(`${API_URL}/auth/login`, loginData);\r\n        } else if (arguments.length >= 2) {\r\n          // If two separate arguments (username, password) were provided\r\n          const [username, password] = arguments;\r\n          response = await axios.post(`${API_URL}/auth/login`, {\r\n            username,\r\n            password\r\n          });\r\n        } else {\r\n          throw new Error(\"Invalid login parameters\");\r\n        }\r\n        \r\n        const { token, user } = response.data;\r\n        \r\n        // Save token and user ID to storage\r\n        setToken(token);\r\n        setUserId(user.id || user._id); // Handle both id formats\r\n        \r\n        // Set authorization header\r\n        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n        \r\n        // Update state\r\n        setUser(user);\r\n        setIsAuthenticated(true);\r\n        \r\n        // Connect socket with authentication\r\n        connectSocket();\r\n        \r\n        return user;\r\n      }\r\n    } catch (error) {\r\n      const message = error.response?.data?.error || \"Login failed. Please check your credentials.\";\r\n      setError(message);\r\n      throw new Error(message);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Register function - updated endpoint\r\n  const register = async (username, email, password) => {\r\n    try {\r\n      setError(null);\r\n      setIsLoading(true);\r\n      \r\n      // Changed from /api/users/register to /auth/register\r\n      const response = await axios.post(`${API_URL}/auth/register`, {\r\n        username,\r\n        email,\r\n        password\r\n      });\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      const message = error.response?.data?.error || \"Registration failed. Please try again.\";\r\n      setError(message);\r\n      throw new Error(message);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Logout function\r\n  const logout = () => {\r\n    // Remove token from storage\r\n    removeToken();\r\n    removeUserId();\r\n    \r\n    // Remove authorization header\r\n    delete axios.defaults.headers.common['Authorization'];\r\n    \r\n    // Update state\r\n    setUser(null);\r\n    setIsAuthenticated(false);\r\n    \r\n    // Disconnect socket\r\n    disconnectSocket();\r\n  };\r\n\r\n  // Update user profile - updated endpoint\r\n  const updateProfile = async (userData) => {\r\n    try {\r\n      setIsLoading(true);\r\n      // Changed from /api/users/profile/:userId to /auth/profile\r\n      const response = await axios.put(`${API_URL}/auth/profile`, userData);\r\n      \r\n      if (response.data) {\r\n        setUser({...user, ...response.data});\r\n      }\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      const message = error.response?.data?.error || \"Failed to update profile.\";\r\n      setError(message);\r\n      throw new Error(message);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Context value\r\n  const value = {\r\n    user,\r\n    isAuthenticated,\r\n    isLoading,\r\n    error,\r\n    login,\r\n    logout,\r\n    register,\r\n    updateProfile\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to use the auth context\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  \r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  \r\n  return context;\r\n};\r\n\r\nexport default AuthContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}