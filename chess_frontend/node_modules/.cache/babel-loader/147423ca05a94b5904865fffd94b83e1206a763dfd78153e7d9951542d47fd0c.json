{"ast":null,"code":"var _jsxFileName = \"/home/sonbx/Documents/Project/Chess_Game/chess_frontend/src/components/Board.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport BoardSquare from './BoardSquare';\nimport '../styles/Board.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Board({\n  board,\n  position,\n  playerColor = 'white',\n  possibleMoves = {},\n  onMove,\n  disabled = false\n}) {\n  _s();\n  const [currBoard, setCurrBoard] = useState([]);\n  const [selectedPiece, setSelectedPiece] = useState(null);\n\n  // Determine if board should be flipped (player is black)\n  const isFlipped = playerColor === 'black';\n  useEffect(() => {\n    console.log(\"Board updated:\", board);\n    setCurrBoard(board.flat());\n  }, [board]);\n\n  // Add this effect to log when playerColor changes\n  useEffect(() => {\n    console.log(\"Player color changed to:\", playerColor);\n    console.log(\"Board is flipped:\", isFlipped);\n  }, [playerColor, isFlipped]);\n  function getXYPosition(i) {\n    let x, y;\n    if (isFlipped) {\n      // Flipped coordinates for black player\n      x = 7 - i % 8;\n      y = Math.floor(i / 8);\n    } else {\n      // Normal coordinates for white player\n      x = i % 8;\n      y = Math.abs(Math.floor(i / 8) - 7);\n    }\n    return {\n      x,\n      y\n    };\n  }\n  function isBlack(i) {\n    const {\n      x,\n      y\n    } = getXYPosition(i);\n    return (x + y) % 2 === 1;\n  }\n  function getPosition(i) {\n    const {\n      x,\n      y\n    } = getXYPosition(i);\n    const letter = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'][x];\n    return `${letter}${y + 1}`;\n  }\n\n  // Convert from position notation (e.g. \"e4\") to board index\n  // eslint-disable-next-line no-unused-vars\n  function getIndexFromPosition(pos) {\n    const x = pos.charCodeAt(0) - 97; // 'a' is 97 in ASCII\n    const y = parseInt(pos[1]) - 1;\n    if (isFlipped) {\n      // Calculate index for flipped board\n      return y * 8 + (7 - x);\n    } else {\n      // Calculate index for normal board\n      return (7 - y) * 8 + x;\n    }\n  }\n\n  // Check if a position is a valid move\n  function isPossibleMove(position) {\n    var _possibleMoves$select;\n    if (!selectedPiece) return false;\n\n    // Debug the possibleMoves structure\n    console.log(\"Checking move possibility:\", {\n      from: selectedPiece,\n      to: position,\n      possibleMovesForPiece: possibleMoves[selectedPiece]\n    });\n    return (_possibleMoves$select = possibleMoves[selectedPiece]) === null || _possibleMoves$select === void 0 ? void 0 : _possibleMoves$select.includes(position);\n  }\n\n  // Completely rewrite the handleSquareClick function to fix black piece movement\n  function handleSquareClick(position, piece) {\n    if (disabled) {\n      console.log(\"Board is disabled, cannot move\");\n      return;\n    }\n    console.log(\"Clicked on square:\", position);\n    console.log(\"Piece at position:\", piece);\n    console.log(\"Player color:\", playerColor);\n    console.log(\"Selected piece:\", selectedPiece);\n\n    // If we've already selected a piece\n    if (selectedPiece) {\n      // Trying to move to a new position\n      if (position !== selectedPiece) {\n        // Check if the move is in the possibleMoves list\n        if (possibleMoves[selectedPiece] && possibleMoves[selectedPiece].includes(position)) {\n          console.log(`Valid move: ${selectedPiece} â†’ ${position}`);\n          onMove(selectedPiece, position);\n        } else {\n          console.log(\"Invalid move - not in possible moves list\");\n          console.log(\"Available moves for\", selectedPiece, \":\", possibleMoves[selectedPiece]);\n        }\n      }\n      // Always clear the selection after attempting a move\n      setSelectedPiece(null);\n    }\n    // No piece selected yet - select one if it's the player's color\n    else if (piece && piece.color === playerColor) {\n      console.log(\"Selecting piece at\", position);\n      setSelectedPiece(position);\n\n      // Debug possible moves for this piece\n      if (possibleMoves[position]) {\n        console.log(\"Possible moves for this piece:\", possibleMoves[position]);\n      } else {\n        console.log(\"No possible moves found for this piece\");\n      }\n    }\n  }\n\n  // Check if king is in check\n  function isCheck(i) {\n    const piece = currBoard[i];\n    return (position === null || position === void 0 ? void 0 : position.inCheck) && piece && piece.type === 'king' && piece.color === position.inCheck;\n  }\n\n  // First, update the way board is rendered and positions are calculated\n  function renderSquares() {\n    const squares = [];\n\n    // This is critical for debugging - add this code\n    console.log(\"Rendering board with:\", {\n      playerColor,\n      isFlipped,\n      selectedPiece,\n      possibleMovesCount: Object.keys(possibleMoves).length\n    });\n    for (let i = 0; i < 64; i++) {\n      var _possibleMoves$select2;\n      // Calculate the actual index based on whether board is flipped\n      const actualIndex = isFlipped ? 63 - i : i;\n      const piece = currBoard[actualIndex];\n      const pos = getPosition(actualIndex);\n\n      // Add extensive debugging for black pieces\n      if (piece && piece.color === 'black' && playerColor === 'black') {\n        const hasMoves = possibleMoves[pos] && possibleMoves[pos].length > 0;\n        console.log(`Black piece at ${pos}: type=${piece.type}, hasMoves=${hasMoves}`);\n        if (hasMoves) {\n          console.log(`Available moves for ${pos}:`, possibleMoves[pos]);\n        }\n      }\n\n      // Add a simple click handler that will work regardless of visual flipping\n      squares.push(/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `square ${isBlack(actualIndex) ? 'dark' : 'light'}`,\n        onClick: () => handleSquareClick(pos, piece),\n        children: /*#__PURE__*/_jsxDEV(BoardSquare, {\n          piece: piece,\n          black: isBlack(actualIndex),\n          position: pos,\n          isPossibleMove: selectedPiece && ((_possibleMoves$select2 = possibleMoves[selectedPiece]) === null || _possibleMoves$select2 === void 0 ? void 0 : _possibleMoves$select2.includes(pos)),\n          isSelected: selectedPiece === pos,\n          isCheck: isCheck(actualIndex)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this));\n    }\n    return squares;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chess-board\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: renderSquares()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-coordinates files\",\n      children: (isFlipped ? ['h', 'g', 'f', 'e', 'd', 'c', 'b', 'a'] : ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']).map(file => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: file\n      }, file, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-coordinates ranks\",\n      children: (isFlipped ? [1, 2, 3, 4, 5, 6, 7, 8] : [8, 7, 6, 5, 4, 3, 2, 1]).map(rank => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: rank\n      }, rank, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 5\n  }, this);\n}\n_s(Board, \"rIRkD/5CPCUN3BK9vtuSoE68j4U=\");\n_c = Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useEffect","useState","BoardSquare","jsxDEV","_jsxDEV","Board","board","position","playerColor","possibleMoves","onMove","disabled","_s","currBoard","setCurrBoard","selectedPiece","setSelectedPiece","isFlipped","console","log","flat","getXYPosition","i","x","y","Math","floor","abs","isBlack","getPosition","letter","getIndexFromPosition","pos","charCodeAt","parseInt","isPossibleMove","_possibleMoves$select","from","to","possibleMovesForPiece","includes","handleSquareClick","piece","color","isCheck","inCheck","type","renderSquares","squares","possibleMovesCount","Object","keys","length","_possibleMoves$select2","actualIndex","hasMoves","push","className","onClick","children","black","isSelected","fileName","_jsxFileName","lineNumber","columnNumber","map","file","rank","_c","$RefreshReg$"],"sources":["/home/sonbx/Documents/Project/Chess_Game/chess_frontend/src/components/Board.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport BoardSquare from './BoardSquare';\nimport '../styles/Board.css';\n\nexport default function Board({ board, position, playerColor = 'white', possibleMoves = {}, onMove, disabled = false }) {\n  const [currBoard, setCurrBoard] = useState([]);\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  \n  // Determine if board should be flipped (player is black)\n  const isFlipped = playerColor === 'black';\n\n  useEffect(() => {\n    console.log(\"Board updated:\", board);\n    setCurrBoard(board.flat());\n  }, [board]);\n\n  // Add this effect to log when playerColor changes\n  useEffect(() => {\n    console.log(\"Player color changed to:\", playerColor);\n    console.log(\"Board is flipped:\", isFlipped);\n  }, [playerColor, isFlipped]);\n\n  function getXYPosition(i) {\n    let x, y;\n    \n    if (isFlipped) {\n      // Flipped coordinates for black player\n      x = 7 - (i % 8);\n      y = Math.floor(i / 8);\n    } else {\n      // Normal coordinates for white player\n      x = i % 8;\n      y = Math.abs(Math.floor(i / 8) - 7);\n    }\n    \n    return { x, y };\n  }\n\n  function isBlack(i) {\n    const { x, y } = getXYPosition(i);\n    return (x + y) % 2 === 1;\n  }\n\n  function getPosition(i) {\n    const { x, y } = getXYPosition(i);\n    const letter = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'][x];\n    return `${letter}${y + 1}`;\n  }\n\n  // Convert from position notation (e.g. \"e4\") to board index\n  // eslint-disable-next-line no-unused-vars\n  function getIndexFromPosition(pos) {\n    const x = pos.charCodeAt(0) - 97; // 'a' is 97 in ASCII\n    const y = parseInt(pos[1]) - 1;\n    \n    if (isFlipped) {\n      // Calculate index for flipped board\n      return y * 8 + (7 - x);\n    } else {\n      // Calculate index for normal board\n      return (7 - y) * 8 + x;\n    }\n  }\n\n  // Check if a position is a valid move\n  function isPossibleMove(position) {\n    if (!selectedPiece) return false;\n    \n    // Debug the possibleMoves structure\n    console.log(\"Checking move possibility:\", {\n      from: selectedPiece,\n      to: position,\n      possibleMovesForPiece: possibleMoves[selectedPiece]\n    });\n    \n    return possibleMoves[selectedPiece]?.includes(position);\n  }\n\n  // Completely rewrite the handleSquareClick function to fix black piece movement\n  function handleSquareClick(position, piece) {\n    if (disabled) {\n      console.log(\"Board is disabled, cannot move\");\n      return;\n    }\n    \n    console.log(\"Clicked on square:\", position);\n    console.log(\"Piece at position:\", piece);\n    console.log(\"Player color:\", playerColor);\n    console.log(\"Selected piece:\", selectedPiece);\n    \n    // If we've already selected a piece\n    if (selectedPiece) {\n      // Trying to move to a new position\n      if (position !== selectedPiece) {\n        // Check if the move is in the possibleMoves list\n        if (possibleMoves[selectedPiece] && possibleMoves[selectedPiece].includes(position)) {\n          console.log(`Valid move: ${selectedPiece} â†’ ${position}`);\n          onMove(selectedPiece, position);\n        } else {\n          console.log(\"Invalid move - not in possible moves list\");\n          console.log(\"Available moves for\", selectedPiece, \":\", possibleMoves[selectedPiece]);\n        }\n      }\n      // Always clear the selection after attempting a move\n      setSelectedPiece(null);\n    } \n    // No piece selected yet - select one if it's the player's color\n    else if (piece && piece.color === playerColor) {\n      console.log(\"Selecting piece at\", position);\n      setSelectedPiece(position);\n      \n      // Debug possible moves for this piece\n      if (possibleMoves[position]) {\n        console.log(\"Possible moves for this piece:\", possibleMoves[position]);\n      } else {\n        console.log(\"No possible moves found for this piece\");\n      }\n    }\n  }\n\n  // Check if king is in check\n  function isCheck(i) {\n    const piece = currBoard[i];\n    return position?.inCheck && piece && piece.type === 'king' && piece.color === position.inCheck;\n  }\n\n  // First, update the way board is rendered and positions are calculated\n  function renderSquares() {\n    const squares = [];\n    \n    // This is critical for debugging - add this code\n    console.log(\"Rendering board with:\", {\n      playerColor,\n      isFlipped,\n      selectedPiece,\n      possibleMovesCount: Object.keys(possibleMoves).length\n    });\n    \n    for (let i = 0; i < 64; i++) {\n      // Calculate the actual index based on whether board is flipped\n      const actualIndex = isFlipped ? (63 - i) : i;\n      const piece = currBoard[actualIndex];\n      const pos = getPosition(actualIndex);\n      \n      // Add extensive debugging for black pieces\n      if (piece && piece.color === 'black' && playerColor === 'black') {\n        const hasMoves = possibleMoves[pos] && possibleMoves[pos].length > 0;\n        console.log(`Black piece at ${pos}: type=${piece.type}, hasMoves=${hasMoves}`);\n        if (hasMoves) {\n          console.log(`Available moves for ${pos}:`, possibleMoves[pos]);\n        }\n      }\n      \n      // Add a simple click handler that will work regardless of visual flipping\n      squares.push(\n        <div \n          key={i} \n          className={`square ${isBlack(actualIndex) ? 'dark' : 'light'}`}\n          onClick={() => handleSquareClick(pos, piece)}\n        >\n          <BoardSquare\n            piece={piece}\n            black={isBlack(actualIndex)}\n            position={pos}\n            isPossibleMove={selectedPiece && possibleMoves[selectedPiece]?.includes(pos)}\n            isSelected={selectedPiece === pos}\n            isCheck={isCheck(actualIndex)}\n          />\n        </div>\n      );\n    }\n    \n    return squares;\n  }\n\n  return (\n    <div className=\"chess-board\">\n      <div className=\"board\">\n        {renderSquares()}\n      </div>\n      \n      {/* Coordinates that flip with the board */}\n      <div className=\"board-coordinates files\">\n        {(isFlipped ? ['h', 'g', 'f', 'e', 'd', 'c', 'b', 'a'] : ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']).map(file => (\n          <div key={file}>{file}</div>\n        ))}\n      </div>\n      <div className=\"board-coordinates ranks\">\n        {(isFlipped ? [1, 2, 3, 4, 5, 6, 7, 8] : [8, 7, 6, 5, 4, 3, 2, 1]).map(rank => (\n          <div key={rank}>{rank}</div>\n        ))}\n      </div>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}