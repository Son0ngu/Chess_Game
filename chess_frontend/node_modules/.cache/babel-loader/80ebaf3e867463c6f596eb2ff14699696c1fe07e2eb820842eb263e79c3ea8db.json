{"ast":null,"code":"var _jsxFileName = \"D:\\\\Code\\\\Chess_Game\\\\chess_frontend\\\\src\\\\components\\\\MoveHistory.jsx\";\nimport React from 'react';\nimport '../styles/MoveHistory.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MoveHistory = ({\n  moves = [],\n  playerColor = 'white'\n}) => {\n  // Format move for display (e.g., \"e2-e4\", \"Nf3\", \"O-O\")\n  const formatMove = move => {\n    if (!move) return '';\n\n    // Special case for castling\n    if (move.castling) {\n      return move.castling === 'kingside' ? 'O-O' : 'O-O-O';\n    }\n\n    // For captures\n    if (move.capture) {\n      const pieceSymbol = getPieceSymbol(move.piece);\n      return `${pieceSymbol}${move.from.slice(0, 1)}x${move.to}`;\n    }\n\n    // For regular moves\n    const pieceSymbol = getPieceSymbol(move.piece);\n    return `${pieceSymbol}${move.from}-${move.to}`;\n  };\n\n  // Get the symbol for a piece\n  const getPieceSymbol = piece => {\n    if (!piece || piece === 'pawn') return '';\n    const symbols = {\n      'knight': 'N',\n      'bishop': 'B',\n      'rook': 'R',\n      'queen': 'Q',\n      'king': 'K'\n    };\n    return symbols[piece] || '';\n  };\n\n  // Group moves by pairs (white and black), handling black as first player\n  const groupMovesInPairs = (moves, playerColor) => {\n    const pairs = [];\n    let i = 0;\n    if (playerColor === 'black') {\n      // Black starts: first move is black, white is null\n      pairs.push({\n        white: null,\n        black: moves[0] || null\n      });\n      i = 1;\n      // Now pair up the rest as (white, black)\n      for (; i < moves.length; i += 2) {\n        pairs.push({\n          white: moves[i] || null,\n          black: moves[i + 1] || null\n        });\n      }\n    } else {\n      // White starts: pair as (white, black)\n      for (; i < moves.length; i += 2) {\n        pairs.push({\n          white: moves[i] || null,\n          black: moves[i + 1] || null\n        });\n      }\n    }\n    return pairs;\n  };\n  const movePairs = groupMovesInPairs(moves, playerColor);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"move-history\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Move History\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"move-list\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"#\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"White\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Black\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: movePairs.map((pair, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"move-number\",\n              children: [index + 1, \".\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"move white-move\",\n              children: formatMove(pair.white)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"move black-move\",\n              children: formatMove(pair.black)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_c = MoveHistory;\nexport default MoveHistory;\nvar _c;\n$RefreshReg$(_c, \"MoveHistory\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","MoveHistory","moves","playerColor","formatMove","move","castling","capture","pieceSymbol","getPieceSymbol","piece","from","slice","to","symbols","groupMovesInPairs","pairs","i","push","white","black","length","movePairs","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","pair","index","_c","$RefreshReg$"],"sources":["D:/Code/Chess_Game/chess_frontend/src/components/MoveHistory.jsx"],"sourcesContent":["import React from 'react';\r\nimport '../styles/MoveHistory.css';\r\n\r\nconst MoveHistory = ({ moves = [], playerColor = 'white' }) => {\r\n  // Format move for display (e.g., \"e2-e4\", \"Nf3\", \"O-O\")\r\n  const formatMove = (move) => {\r\n    if (!move) return '';\r\n    \r\n    // Special case for castling\r\n    if (move.castling) {\r\n      return move.castling === 'kingside' ? 'O-O' : 'O-O-O';\r\n    }\r\n    \r\n    // For captures\r\n    if (move.capture) {\r\n      const pieceSymbol = getPieceSymbol(move.piece);\r\n      return `${pieceSymbol}${move.from.slice(0, 1)}x${move.to}`;\r\n    }\r\n    \r\n    // For regular moves\r\n    const pieceSymbol = getPieceSymbol(move.piece);\r\n    return `${pieceSymbol}${move.from}-${move.to}`;\r\n  };\r\n  \r\n  // Get the symbol for a piece\r\n  const getPieceSymbol = (piece) => {\r\n    if (!piece || piece === 'pawn') return '';\r\n    const symbols = {\r\n      'knight': 'N',\r\n      'bishop': 'B',\r\n      'rook': 'R',\r\n      'queen': 'Q',\r\n      'king': 'K'\r\n    };\r\n    return symbols[piece] || '';\r\n  };\r\n\r\n// Group moves by pairs (white and black), handling black as first player\r\nconst groupMovesInPairs = (moves, playerColor) => {\r\n  const pairs = [];\r\n  let i = 0;\r\n\r\n  if (playerColor === 'black') {\r\n    // Black starts: first move is black, white is null\r\n    pairs.push({ white: null, black: moves[0] || null });\r\n    i = 1;\r\n    // Now pair up the rest as (white, black)\r\n    for (; i < moves.length; i += 2) {\r\n      pairs.push({\r\n        white: moves[i] || null,\r\n        black: moves[i + 1] || null,\r\n      });\r\n    }\r\n  } else {\r\n    // White starts: pair as (white, black)\r\n    for (; i < moves.length; i += 2) {\r\n      pairs.push({\r\n        white: moves[i] || null,\r\n        black: moves[i + 1] || null,\r\n      });\r\n    }\r\n  }\r\n  return pairs;\r\n};\r\n\r\nconst movePairs = groupMovesInPairs(moves, playerColor);\r\n\r\n  return (\r\n    <div className=\"move-history\">\r\n      <h3>Move History</h3>\r\n      <div className=\"move-list\">\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>#</th>\r\n              <th>White</th>\r\n              <th>Black</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {movePairs.map((pair, index) => (\r\n              <tr key={index}>\r\n                <td className=\"move-number\">{index + 1}.</td>\r\n                <td className=\"move white-move\">{formatMove(pair.white)}</td>\r\n                <td className=\"move black-move\">{formatMove(pair.black)}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MoveHistory;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}