{"ast":null,"code":"import { io } from 'socket.io-client';\nimport { getToken } from '../utils/storage';\n\n// Use the same port as your web server - change this if necessary\n// This should match wherever your backend socket.io server is running\nconst SOCKET_URL = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';\n\n// Create socket instance with better configuration\nexport const socket = io(SOCKET_URL, {\n  autoConnect: false,\n  reconnection: true,\n  reconnectionAttempts: 5,\n  reconnectionDelay: 1000,\n  auth: {\n    token: getToken() // Use the function result, not the function itself\n  }\n});\n\n// Connect socket with current token\nexport const connectSocket = () => {\n  if (getToken()) {\n    socket.auth = {\n      token: getToken()\n    };\n    socket.connect();\n    return true;\n  }\n  return false;\n};\n\n// Disconnect socket\nexport const disconnectSocket = () => {\n  socket.disconnect();\n};\n\n// Socket event names - centralizing for consistency\nexport const SOCKET_EVENTS = {\n  // Connection events\n  CONNECT: 'connect',\n  CONNECT_ERROR: 'connect_error',\n  DISCONNECT: 'disconnect',\n  // Game events\n  GAME_MATCHED: 'game:matched',\n  GAME_SEARCHING: 'game:searching',\n  GAME_ERROR: 'game:error',\n  GAME_UPDATE: 'game:update',\n  GAME_OVER: 'game:over',\n  GAME_SEARCH_CANCELED: 'game:searchCanceled',\n  // Matchmaking events\n  MATCHMAKING_UPDATE: 'matchmaking:update',\n  // Lobby events\n  LOBBY_ACTIVE_PLAYERS: 'lobby:activePlayers'\n};\n\n// Debug all incoming socket events\nif (process.env.NODE_ENV === 'development') {\n  const originalOn = socket.on;\n  socket.on = function (eventName, callback) {\n    const wrappedCallback = data => {\n      console.log(`🔽 Socket received '${eventName}'`, data);\n      return callback(data);\n    };\n    return originalOn.call(socket, eventName, wrappedCallback);\n  };\n\n  // Also debug socket emissions\n  const originalEmit = socket.emit;\n  socket.emit = function (eventName, ...args) {\n    console.log(`🔼 Socket emitting '${eventName}'`, args);\n    return originalEmit.apply(socket, [eventName, ...args]);\n  };\n}\n\n// Listen for connection/errors\nsocket.on(SOCKET_EVENTS.CONNECT, () => {\n  console.log('✅ Socket connected successfully');\n});\nsocket.on(SOCKET_EVENTS.CONNECT_ERROR, error => {\n  console.error('❌ Socket connection error:', error.message);\n\n  // If authentication error, handle it\n  if (error.message === 'authentication_error') {\n    console.error('Authentication failed for socket connection');\n    // You could dispatch an action or call a callback here\n  }\n});\nsocket.on(SOCKET_EVENTS.DISCONNECT, reason => {\n  console.log(`Socket disconnected: ${reason}`);\n});\n\n// Export default socket instance\nexport default socket;","map":{"version":3,"names":["io","getToken","SOCKET_URL","process","env","REACT_APP_SOCKET_URL","socket","autoConnect","reconnection","reconnectionAttempts","reconnectionDelay","auth","token","connectSocket","connect","disconnectSocket","disconnect","SOCKET_EVENTS","CONNECT","CONNECT_ERROR","DISCONNECT","GAME_MATCHED","GAME_SEARCHING","GAME_ERROR","GAME_UPDATE","GAME_OVER","GAME_SEARCH_CANCELED","MATCHMAKING_UPDATE","LOBBY_ACTIVE_PLAYERS","NODE_ENV","originalOn","on","eventName","callback","wrappedCallback","data","console","log","call","originalEmit","emit","args","apply","error","message","reason"],"sources":["D:/Code/Chess_Game/chess_frontend/src/services/socket.js"],"sourcesContent":["import { io } from 'socket.io-client';\r\nimport { getToken } from '../utils/storage';\r\n\r\n// Use the same port as your web server - change this if necessary\r\n// This should match wherever your backend socket.io server is running\r\nconst SOCKET_URL = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';\r\n\r\n// Create socket instance with better configuration\r\nexport const socket = io(SOCKET_URL, {\r\n  autoConnect: false,\r\n  reconnection: true,\r\n  reconnectionAttempts: 5,\r\n  reconnectionDelay: 1000,\r\n  auth: {\r\n    token: getToken()  // Use the function result, not the function itself\r\n  }\r\n});\r\n\r\n// Connect socket with current token\r\nexport const connectSocket = () => {\r\n  if (getToken()) {\r\n    socket.auth = { token: getToken() };\r\n    socket.connect();\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\n// Disconnect socket\r\nexport const disconnectSocket = () => {\r\n  socket.disconnect();\r\n};\r\n\r\n// Socket event names - centralizing for consistency\r\nexport const SOCKET_EVENTS = {\r\n  // Connection events\r\n  CONNECT: 'connect',\r\n  CONNECT_ERROR: 'connect_error',\r\n  DISCONNECT: 'disconnect',\r\n  \r\n  // Game events\r\n  GAME_MATCHED: 'game:matched',\r\n  GAME_SEARCHING: 'game:searching',\r\n  GAME_ERROR: 'game:error',\r\n  GAME_UPDATE: 'game:update',\r\n  GAME_OVER: 'game:over',\r\n  GAME_SEARCH_CANCELED: 'game:searchCanceled',\r\n  \r\n  // Matchmaking events\r\n  MATCHMAKING_UPDATE: 'matchmaking:update',\r\n  \r\n  // Lobby events\r\n  LOBBY_ACTIVE_PLAYERS: 'lobby:activePlayers'\r\n};\r\n\r\n// Debug all incoming socket events\r\nif (process.env.NODE_ENV === 'development') {\r\n  const originalOn = socket.on;\r\n  \r\n  socket.on = function(eventName, callback) {\r\n    const wrappedCallback = (data) => {\r\n      console.log(`🔽 Socket received '${eventName}'`, data);\r\n      return callback(data);\r\n    };\r\n    return originalOn.call(socket, eventName, wrappedCallback);\r\n  };\r\n  \r\n  // Also debug socket emissions\r\n  const originalEmit = socket.emit;\r\n  socket.emit = function(eventName, ...args) {\r\n    console.log(`🔼 Socket emitting '${eventName}'`, args);\r\n    return originalEmit.apply(socket, [eventName, ...args]);\r\n  };\r\n}\r\n\r\n// Listen for connection/errors\r\nsocket.on(SOCKET_EVENTS.CONNECT, () => {\r\n  console.log('✅ Socket connected successfully');\r\n});\r\n\r\nsocket.on(SOCKET_EVENTS.CONNECT_ERROR, (error) => {\r\n  console.error('❌ Socket connection error:', error.message);\r\n  \r\n  // If authentication error, handle it\r\n  if (error.message === 'authentication_error') {\r\n    console.error('Authentication failed for socket connection');\r\n    // You could dispatch an action or call a callback here\r\n  }\r\n});\r\n\r\nsocket.on(SOCKET_EVENTS.DISCONNECT, (reason) => {\r\n  console.log(`Socket disconnected: ${reason}`);\r\n});\r\n\r\n// Export default socket instance\r\nexport default socket;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}