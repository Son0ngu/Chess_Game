{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { socket } from '../services/socket';\nconst useChess = gameId => {\n  _s();\n  const [board, setBoard] = useState(initialBoard());\n  const [history, setHistory] = useState([]);\n  const [currentIndex, setCurrentIndex] = useState(-1);\n  const [playerColor, setPlayerColor] = useState('white');\n  const [currentTurn, setCurrentTurn] = useState('white');\n  const [moves, setMoves] = useState([]);\n  const [position, setPosition] = useState(null);\n  const [possibleMoves, setPossibleMoves] = useState({});\n  const [gameStatus, setGameStatus] = useState(null);\n  const [inCheck, setInCheck] = useState(false);\n\n  // Có thể undo nếu có ít nhất một nước đi trong lịch sử và không phải game over\n  const canUndo = currentIndex >= 0 && !(gameStatus !== null && gameStatus !== void 0 && gameStatus.isGameOver);\n\n  // Có thể redo nếu có nước đi trong lịch sử sau vị trí hiện tại\n  const canRedo = currentIndex < history.length - 1;\n\n  // Cập nhật game state từ server\n  useEffect(() => {\n    if (!gameId) return;\n    socket.on(\"game:update\", data => {\n      var _data$position;\n      setBoard(data.board);\n      setPlayerColor(data.playerColor);\n      setCurrentTurn(data.currentTurn);\n      setMoves(data.moves);\n      setPosition(data.position);\n      setPossibleMoves(data.possibleMoves);\n      setInCheck(!!((_data$position = data.position) !== null && _data$position !== void 0 && _data$position.inCheck));\n\n      // Cập nhật lịch sử nước đi\n      if (data.history) {\n        setHistory(data.history);\n        setCurrentIndex(data.history.length - 1);\n      }\n    });\n    socket.on(\"game:status\", status => {\n      setGameStatus(status);\n    });\n    return () => {\n      socket.off(\"game:update\");\n      socket.off(\"game:status\");\n    };\n  }, [gameId]);\n\n  // Thực hiện nước đi\n  const makeMove = useCallback((from, to) => {\n    socket.emit(\"game:move\", {\n      gameId,\n      from,\n      to\n    });\n  }, [gameId]);\n\n  // Undo nước đi\n  const undo = useCallback(() => {\n    if (canUndo) {\n      socket.emit(\"game:undo\", {\n        gameId\n      });\n    }\n  }, [gameId, canUndo]);\n\n  // Redo nước đi\n  const redo = useCallback(() => {\n    if (canRedo) {\n      socket.emit(\"game:redo\", {\n        gameId\n      });\n    }\n  }, [gameId, canRedo]);\n\n  // Reset game\n  const reset = useCallback(() => {\n    socket.emit(\"game:reset\", {\n      gameId\n    });\n  }, [gameId]);\n  return {\n    board,\n    playerColor,\n    currentTurn,\n    moves,\n    position,\n    possibleMoves,\n    inCheck,\n    gameStatus,\n    makeMove,\n    undo,\n    redo,\n    reset,\n    canUndo,\n    canRedo\n  };\n};\n\n// Tạo bàn cờ ban đầu\n_s(useChess, \"5dT0XJ3IdpoXP73SqAJRaGD33dM=\");\nfunction initialBoard() {\n  const board = Array(8).fill(null).map(() => Array(8).fill(null));\n\n  // Thêm quân tốt\n  for (let i = 0; i < 8; i++) {\n    board[1][i] = {\n      type: 'p',\n      color: 'black'\n    };\n    board[6][i] = {\n      type: 'p',\n      color: 'white'\n    };\n  }\n\n  // Thêm quân cờ hàng sau\n  const backRank = ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'];\n  for (let i = 0; i < 8; i++) {\n    board[0][i] = {\n      type: backRank[i],\n      color: 'black'\n    };\n    board[7][i] = {\n      type: backRank[i],\n      color: 'white'\n    };\n  }\n  return board;\n}\nexport default useChess;","map":{"version":3,"names":["useState","useEffect","useCallback","socket","useChess","gameId","_s","board","setBoard","initialBoard","history","setHistory","currentIndex","setCurrentIndex","playerColor","setPlayerColor","currentTurn","setCurrentTurn","moves","setMoves","position","setPosition","possibleMoves","setPossibleMoves","gameStatus","setGameStatus","inCheck","setInCheck","canUndo","isGameOver","canRedo","length","on","data","_data$position","status","off","makeMove","from","to","emit","undo","redo","reset","Array","fill","map","i","type","color","backRank"],"sources":["C:/Users/sonbx/Chess_Game/chess_frontend/src/hooks/useChess.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\nimport { socket } from '../services/socket';\r\n\r\nconst useChess = (gameId) => {\r\n  const [board, setBoard] = useState(initialBoard());\r\n  const [history, setHistory] = useState([]);\r\n  const [currentIndex, setCurrentIndex] = useState(-1);\r\n  const [playerColor, setPlayerColor] = useState('white');\r\n  const [currentTurn, setCurrentTurn] = useState('white');\r\n  const [moves, setMoves] = useState([]);\r\n  const [position, setPosition] = useState(null);\r\n  const [possibleMoves, setPossibleMoves] = useState({});\r\n  const [gameStatus, setGameStatus] = useState(null);\r\n  const [inCheck, setInCheck] = useState(false);\r\n  \r\n  // Có thể undo nếu có ít nhất một nước đi trong lịch sử và không phải game over\r\n  const canUndo = currentIndex >= 0 && !gameStatus?.isGameOver;\r\n  \r\n  // Có thể redo nếu có nước đi trong lịch sử sau vị trí hiện tại\r\n  const canRedo = currentIndex < history.length - 1;\r\n  \r\n  // Cập nhật game state từ server\r\n  useEffect(() => {\r\n    if (!gameId) return;\r\n    \r\n    socket.on(\"game:update\", (data) => {\r\n      setBoard(data.board);\r\n      setPlayerColor(data.playerColor);\r\n      setCurrentTurn(data.currentTurn);\r\n      setMoves(data.moves);\r\n      setPosition(data.position);\r\n      setPossibleMoves(data.possibleMoves);\r\n      setInCheck(!!data.position?.inCheck);\r\n      \r\n      // Cập nhật lịch sử nước đi\r\n      if (data.history) {\r\n        setHistory(data.history);\r\n        setCurrentIndex(data.history.length - 1);\r\n      }\r\n    });\r\n\r\n    socket.on(\"game:status\", (status) => {\r\n      setGameStatus(status);\r\n    });\r\n\r\n    return () => {\r\n      socket.off(\"game:update\");\r\n      socket.off(\"game:status\");\r\n    };\r\n  }, [gameId]);\r\n  \r\n  // Thực hiện nước đi\r\n  const makeMove = useCallback((from, to) => {\r\n    socket.emit(\"game:move\", { gameId, from, to });\r\n  }, [gameId]);\r\n  \r\n  // Undo nước đi\r\n  const undo = useCallback(() => {\r\n    if (canUndo) {\r\n      socket.emit(\"game:undo\", { gameId });\r\n    }\r\n  }, [gameId, canUndo]);\r\n  \r\n  // Redo nước đi\r\n  const redo = useCallback(() => {\r\n    if (canRedo) {\r\n      socket.emit(\"game:redo\", { gameId });\r\n    }\r\n  }, [gameId, canRedo]);\r\n  \r\n  // Reset game\r\n  const reset = useCallback(() => {\r\n    socket.emit(\"game:reset\", { gameId });\r\n  }, [gameId]);\r\n  \r\n  return {\r\n    board,\r\n    playerColor,\r\n    currentTurn,\r\n    moves,\r\n    position,\r\n    possibleMoves,\r\n    inCheck,\r\n    gameStatus,\r\n    makeMove,\r\n    undo,\r\n    redo,\r\n    reset,\r\n    canUndo,\r\n    canRedo\r\n  };\r\n};\r\n\r\n// Tạo bàn cờ ban đầu\r\nfunction initialBoard() {\r\n  const board = Array(8).fill(null).map(() => Array(8).fill(null));\r\n  \r\n  // Thêm quân tốt\r\n  for (let i = 0; i < 8; i++) {\r\n    board[1][i] = { type: 'p', color: 'black' };\r\n    board[6][i] = { type: 'p', color: 'white' };\r\n  }\r\n  \r\n  // Thêm quân cờ hàng sau\r\n  const backRank = ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'];\r\n  for (let i = 0; i < 8; i++) {\r\n    board[0][i] = { type: backRank[i], color: 'black' };\r\n    board[7][i] = { type: backRank[i], color: 'white' };\r\n  }\r\n  \r\n  return board;\r\n}\r\n\r\nexport default useChess;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}