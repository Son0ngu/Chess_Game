{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { useAuth } from '../context/AuthContext';\nimport { socket } from '../services/socket';\n\n/**\r\n * Custom hook to manage chess game state and socket communication\r\n * @param {string} gameId - The ID of the current game\r\n * @returns {Object} Chess game state and methods\r\n */\nconst useChess = gameId => {\n  _s();\n  const {\n    user\n  } = useAuth();\n\n  // Game state\n  const [board, setBoard] = useState(initialBoard());\n  const [position, setPosition] = useState(null);\n  const [moves, setMoves] = useState([]);\n  const [currentTurn, setCurrentTurn] = useState('white');\n  const [playerColor, setPlayerColor] = useState(null);\n  const [possibleMoves, setPossibleMoves] = useState({});\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [pastPositions, setPastPositions] = useState([]);\n  const [futurePositions, setFuturePositions] = useState([]);\n  const [inCheck, setInCheck] = useState(false);\n  const [gameStatus, setGameStatus] = useState({\n    isGameOver: false,\n    result: null\n  });\n\n  // Initialize game when component mounts\n  useEffect(() => {\n    if (!gameId) return;\n\n    // Join the game\n    socket.emit('game:join', {\n      gameId\n    });\n\n    // Handle initial game data\n    const handleGameData = data => {\n      setBoard(data.board || initialBoard());\n      setPosition(data.position || null);\n      setMoves(data.moves || []);\n      setCurrentTurn(data.currentTurn || 'white');\n\n      // Set player color based on the player's user ID\n      const playerData = data.players.find(p => p.id === (user === null || user === void 0 ? void 0 : user.id));\n      setPlayerColor((playerData === null || playerData === void 0 ? void 0 : playerData.color) || 'white');\n\n      // Update game status\n      setInCheck(data.inCheck || false);\n      setPossibleMoves(data.legalMoves || {});\n      if (data.gameOver) {\n        setGameStatus({\n          isGameOver: true,\n          result: data.result\n        });\n      }\n    };\n\n    // Listen for game updates\n    socket.on('game:update', data => {\n      setBoard(data.board);\n      setPosition(data.position);\n      setMoves(prevMoves => [...prevMoves, data.lastMove]);\n      setCurrentTurn(data.currentTurn);\n      setInCheck(data.inCheck || false);\n      setPossibleMoves(data.legalMoves || {});\n      if (data.gameOver) {\n        setGameStatus({\n          isGameOver: true,\n          result: data.result\n        });\n      }\n    });\n\n    // Listen for game data when joining\n    socket.on('game:data', handleGameData);\n\n    // Listen for move validation failures\n    socket.on('game:moveRejected', error => {\n      console.error('Move rejected:', error);\n      // Reset any UI state needed after failed move\n    });\n\n    // Cleanup on unmount\n    return () => {\n      socket.off('game:update');\n      socket.off('game:data');\n      socket.off('game:moveRejected');\n      socket.emit('game:leave', {\n        gameId\n      });\n    };\n  }, [gameId, user]);\n\n  // Handle piece selection and move highlighting\n  const selectPiece = useCallback((piece, position) => {\n    // Only allow selection of the player's own pieces during their turn\n    if (piece && piece.color === playerColor && currentTurn === playerColor) {\n      setSelectedPiece({\n        piece,\n        position\n      });\n      // Highlight possible moves for this piece\n    } else {\n      setSelectedPiece(null);\n    }\n  }, [playerColor, currentTurn]);\n\n  // Make a move\n  const makeMove = useCallback((from, to) => {\n    if (gameStatus.isGameOver || currentTurn !== playerColor) {\n      return false;\n    }\n    setPastPositions(prev => [...prev, position]);\n    setFuturePositions([]);\n\n    // Send move to server\n    socket.emit('game:move', {\n      gameId,\n      from,\n      to\n    });\n    return true;\n  }, [gameId, currentTurn, playerColor, gameStatus.isGameOver]);\n\n  // Request undo\n  const undo = useCallback(() => {\n    if (!gameId || gameStatus.isGameOver || currentTurn !== playerColor) {\n      return false;\n    }\n\n    // Send undo request to the server\n    socket.emit('game:requestUndo', {\n      gameId\n    });\n\n    // Optionally, you can disable the undo button or show a loading state while waiting for the server response\n    return true;\n  }, [gameId, currentTurn, playerColor, gameStatus.isGameOver]);\n\n  // Handle redo (typically only for offline or analysis mode)\n  // In a real-time multiplayer game, redo might not be applicable\n  // This would be more useful in offline analysis mode\n  const redo = useCallback(() => {\n    if (!gameId || gameStatus.isGameOver || currentTurn !== playerColor || futurePositions.length === 0) {\n      return false;\n    }\n    /*\r\n    const nextPosition = futurePositions[futurePositions.length - 1];\r\n    \r\n    setPastPositions(prev => [...prev, position]);\r\n    setFuturePositions(prev => prev.slice(0, prev.length - 1));\r\n    setPosition(nextPosition);\r\n    */\n\n    socket.emit('game:requestRedo', {\n      gameId\n    });\n    return true;\n  }, [gameId, currentTurn, playerColor, gameStatus.isGameOver]);\n\n  // Reset game\n  const reset = useCallback(() => {\n    socket.emit('game:reset', {\n      gameId\n    });\n  }, [gameId]);\n  useEffect(() => {\n    if (!gameId) return;\n    const handleUndo = data => {\n      setPastPositions(prev => [...prev.slice(0, prev.length - 1)]); // bỏ bớt move cuối\n      setFuturePositions(prev => [position, ...prev]); // lưu hiện tại cho redo\n\n      setPosition(data.position);\n      setMoves(data.moves);\n      setCurrentTurn(data.currentTurn);\n      setInCheck(data.inCheck || false);\n      setPossibleMoves(data.legalMoves || {});\n      if (data.gameOver) {\n        setGameStatus({\n          isGameOver: true,\n          result: data.result\n        });\n      }\n    };\n    socket.on('game:undo', handleUndo);\n    return () => {\n      socket.off('game:undo', handleUndo);\n    };\n  }, [gameId, position]);\n  useEffect(() => {\n    if (!gameId) return;\n    const handleRedo = data => {\n      position(data.position); // cập nhật vị trí bàn cờ mới\n      currentTurn(data.currentTurn); // lượt mới\n      inCheck(data.inCheck || false); // đang bị chiếu hay không\n      possibleMoves(data.legalMoves || {}); // nước đi hợp lệ\n\n      if (data.gameOver) {\n        gameStatus({\n          isGameOver: true,\n          result: data.result\n        });\n      }\n    };\n    socket.on('game:redo', handleRedo);\n    return () => {\n      socket.off('game:redo', handleRedo);\n    };\n  }, [gameId]);\n  return {\n    board,\n    position,\n    currentTurn,\n    playerColor,\n    moves,\n    inCheck,\n    possibleMoves,\n    selectedPiece,\n    gameStatus,\n    selectPiece,\n    makeMove,\n    undo,\n    redo,\n    reset\n  };\n};\n\n// Helper function to create initial empty board\n_s(useChess, \"et3otjItzZlS9P30LBPHpnYNy9g=\", false, function () {\n  return [useAuth];\n});\nfunction initialBoard() {\n  // Create 8x8 empty board representation\n  // This could be replaced with FEN parsing if you use chess.js or another library\n  return Array(8).fill().map(() => Array(8).fill(null));\n}\nexport default useChess;","map":{"version":3,"names":["useState","useEffect","useCallback","useAuth","socket","useChess","gameId","_s","user","board","setBoard","initialBoard","position","setPosition","moves","setMoves","currentTurn","setCurrentTurn","playerColor","setPlayerColor","possibleMoves","setPossibleMoves","selectedPiece","setSelectedPiece","pastPositions","setPastPositions","futurePositions","setFuturePositions","inCheck","setInCheck","gameStatus","setGameStatus","isGameOver","result","emit","handleGameData","data","playerData","players","find","p","id","color","legalMoves","gameOver","on","prevMoves","lastMove","error","console","off","selectPiece","piece","makeMove","from","to","prev","undo","redo","length","reset","handleUndo","slice","handleRedo","Array","fill","map"],"sources":["E:/ĐH/20242/Secure Web Dev/Project_Chess/Chess_Game/chess_frontend/src/hooks/useChess.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\nimport { useAuth } from '../context/AuthContext';\r\nimport { socket } from '../services/socket';\r\n\r\n/**\r\n * Custom hook to manage chess game state and socket communication\r\n * @param {string} gameId - The ID of the current game\r\n * @returns {Object} Chess game state and methods\r\n */\r\nconst useChess = (gameId) => {\r\n  const { user } = useAuth();\r\n  \r\n  // Game state\r\n  const [board, setBoard] = useState(initialBoard());\r\n  const [position, setPosition] = useState(null);\r\n  const [moves, setMoves] = useState([]);\r\n  const [currentTurn, setCurrentTurn] = useState('white');\r\n  const [playerColor, setPlayerColor] = useState(null);\r\n  const [possibleMoves, setPossibleMoves] = useState({});\r\n  const [selectedPiece, setSelectedPiece] = useState(null);\r\n  const [pastPositions, setPastPositions] = useState([]);\r\n  const [futurePositions, setFuturePositions] = useState([]);\r\n  const [inCheck, setInCheck] = useState(false);\r\n  const [gameStatus, setGameStatus] = useState({\r\n    isGameOver: false,\r\n    result: null\r\n  });\r\n  \r\n  // Initialize game when component mounts\r\n  useEffect(() => {\r\n    if (!gameId) return;\r\n\r\n    // Join the game\r\n    socket.emit('game:join', { gameId });\r\n    \r\n    // Handle initial game data\r\n    const handleGameData = (data) => {\r\n      setBoard(data.board || initialBoard());\r\n      setPosition(data.position || null);\r\n      setMoves(data.moves || []);\r\n      setCurrentTurn(data.currentTurn || 'white');\r\n      \r\n      // Set player color based on the player's user ID\r\n      const playerData = data.players.find(p => p.id === user?.id);\r\n      setPlayerColor(playerData?.color || 'white');\r\n      \r\n      // Update game status\r\n      setInCheck(data.inCheck || false);\r\n      setPossibleMoves(data.legalMoves || {});\r\n      \r\n      if (data.gameOver) {\r\n        setGameStatus({\r\n          isGameOver: true,\r\n          result: data.result\r\n        });\r\n      }\r\n    };\r\n    \r\n    // Listen for game updates\r\n    socket.on('game:update', (data) => {\r\n      setBoard(data.board);\r\n      setPosition(data.position);\r\n      setMoves(prevMoves => [...prevMoves, data.lastMove]);\r\n      setCurrentTurn(data.currentTurn);\r\n      setInCheck(data.inCheck || false);\r\n      setPossibleMoves(data.legalMoves || {});\r\n      \r\n      if (data.gameOver) {\r\n        setGameStatus({\r\n          isGameOver: true,\r\n          result: data.result\r\n        });\r\n      }\r\n    });\r\n    \r\n    // Listen for game data when joining\r\n    socket.on('game:data', handleGameData);\r\n    \r\n    // Listen for move validation failures\r\n    socket.on('game:moveRejected', (error) => {\r\n      console.error('Move rejected:', error);\r\n      // Reset any UI state needed after failed move\r\n    });\r\n    \r\n    // Cleanup on unmount\r\n    return () => {\r\n      socket.off('game:update');\r\n      socket.off('game:data');\r\n      socket.off('game:moveRejected');\r\n      socket.emit('game:leave', { gameId });\r\n    };\r\n  }, [gameId, user]);\r\n  \r\n  // Handle piece selection and move highlighting\r\n  const selectPiece = useCallback((piece, position) => {\r\n    // Only allow selection of the player's own pieces during their turn\r\n    if (piece && piece.color === playerColor && currentTurn === playerColor) {\r\n      setSelectedPiece({ piece, position });\r\n      // Highlight possible moves for this piece\r\n    } else {\r\n      setSelectedPiece(null);\r\n    }\r\n  }, [playerColor, currentTurn]);\r\n  \r\n  // Make a move\r\n  const makeMove = useCallback((from, to) => {\r\n    if (gameStatus.isGameOver || currentTurn !== playerColor) {\r\n      return false;\r\n    }\r\n\r\n    setPastPositions(prev => [...prev, position]);\r\n    setFuturePositions([]);\r\n    \r\n    // Send move to server\r\n    socket.emit('game:move', {\r\n      gameId,\r\n      from,\r\n      to\r\n    });\r\n    \r\n    return true;\r\n  }, [gameId, currentTurn, playerColor, gameStatus.isGameOver]);\r\n  \r\n  // Request undo\r\n  const undo = useCallback(() => {\r\n    if (!gameId || gameStatus.isGameOver || currentTurn !== playerColor) {\r\n      return false;\r\n    }\r\n    \r\n    // Send undo request to the server\r\n    socket.emit('game:requestUndo', { gameId });\r\n  \r\n    // Optionally, you can disable the undo button or show a loading state while waiting for the server response\r\n    return true;\r\n  }, [gameId, currentTurn, playerColor, gameStatus.isGameOver]);\r\n\r\n\r\n  // Handle redo (typically only for offline or analysis mode)\r\n  // In a real-time multiplayer game, redo might not be applicable\r\n  // This would be more useful in offline analysis mode\r\n  const redo = useCallback(() => {\r\n    if (!gameId || gameStatus.isGameOver || currentTurn !== playerColor || futurePositions.length === 0 ) {\r\n      return false;\r\n    }\r\n    /*\r\n    const nextPosition = futurePositions[futurePositions.length - 1];\r\n    \r\n    setPastPositions(prev => [...prev, position]);\r\n    setFuturePositions(prev => prev.slice(0, prev.length - 1));\r\n    setPosition(nextPosition);\r\n    */\r\n\r\n    socket.emit('game:requestRedo', { gameId });\r\n    \r\n    return true;\r\n  }, [gameId, currentTurn, playerColor, gameStatus.isGameOver]);\r\n  \r\n  \r\n  // Reset game\r\n  const reset = useCallback(() => {\r\n    socket.emit('game:reset', { gameId });\r\n  }, [gameId]);\r\n\r\n  useEffect(() => {\r\n    if (!gameId) return;\r\n  \r\n    const handleUndo = (data) => {\r\n      setPastPositions(prev => [...prev.slice(0, prev.length - 1)]); // bỏ bớt move cuối\r\n      setFuturePositions(prev => [position, ...prev]); // lưu hiện tại cho redo\r\n  \r\n      setPosition(data.position);\r\n      setMoves(data.moves);\r\n      setCurrentTurn(data.currentTurn);\r\n      setInCheck(data.inCheck || false);\r\n      setPossibleMoves(data.legalMoves || {});\r\n  \r\n      if (data.gameOver) {\r\n        setGameStatus({\r\n          isGameOver: true,\r\n          result: data.result\r\n        });\r\n      }\r\n    };\r\n  \r\n    socket.on('game:undo', handleUndo);\r\n  \r\n    return () => {\r\n      socket.off('game:undo', handleUndo);\r\n    };\r\n  }, [gameId, position]);\r\n  \r\n\r\n  useEffect(() => {\r\n    if (!gameId) return;\r\n  \r\n    const handleRedo = (data) => {\r\n      position(data.position);  // cập nhật vị trí bàn cờ mới\r\n      currentTurn(data.currentTurn);  // lượt mới\r\n      inCheck(data.inCheck || false);  // đang bị chiếu hay không\r\n      possibleMoves(data.legalMoves || {});  // nước đi hợp lệ\r\n  \r\n      if (data.gameOver) {\r\n        gameStatus({\r\n          isGameOver: true,\r\n          result: data.result\r\n        });\r\n      }\r\n    };\r\n  \r\n    socket.on('game:redo', handleRedo);\r\n  \r\n    return () => {\r\n      socket.off('game:redo', handleRedo);\r\n    };\r\n  }, [gameId]);\r\n  \r\n  \r\n\r\n  \r\n  return {\r\n    board,\r\n    position,\r\n    currentTurn,\r\n    playerColor,\r\n    moves,\r\n    inCheck,\r\n    possibleMoves,\r\n    selectedPiece,\r\n    gameStatus,\r\n    selectPiece,\r\n    makeMove,\r\n    undo,\r\n    redo,\r\n    reset\r\n  };\r\n};\r\n\r\n// Helper function to create initial empty board\r\nfunction initialBoard() {\r\n  // Create 8x8 empty board representation\r\n  // This could be replaced with FEN parsing if you use chess.js or another library\r\n  return Array(8).fill().map(() => Array(8).fill(null));\r\n}\r\n\r\nexport default useChess;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}