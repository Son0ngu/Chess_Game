{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { useAuth } from '../context/AuthContext';\nimport { socket } from '../services/socket';\n\n/**\n * Custom hook to manage chess game state and socket communication\n * @param {string} gameId - The ID of the current game\n * @returns {Object} Chess game state and methods\n */\nconst useChess = gameId => {\n  _s();\n  const {\n    user\n  } = useAuth();\n\n  // Game state\n  const [board, setBoard] = useState(initialBoard());\n  const [position, setPosition] = useState(null);\n  const [moves, setMoves] = useState([]);\n  const [currentTurn, setCurrentTurn] = useState('white');\n  const [playerColor, setPlayerColor] = useState(null);\n  const [possibleMoves, setPossibleMoves] = useState({});\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [pastPositions, setPastPositions] = useState([]);\n  const [futurePositions, setFuturePositions] = useState([]);\n  const [inCheck, setInCheck] = useState(false);\n  const [gameStatus, setGameStatus] = useState({\n    isGameOver: false,\n    result: null\n  });\n\n  // Initialize game when component mounts\n  useEffect(() => {\n    if (!gameId) return;\n\n    // Join the game\n    socket.emit('game:join', {\n      gameId\n    });\n\n    // Handle initial game data\n    const handleGameData = data => {\n      setBoard(data.board || initialBoard());\n      setPosition(data.position || null);\n      setMoves(data.moves || []);\n      setCurrentTurn(data.currentTurn || 'white');\n\n      // Set player color based on the player's user ID\n      const playerData = data.players.find(p => p.id === (user === null || user === void 0 ? void 0 : user.id));\n      setPlayerColor((playerData === null || playerData === void 0 ? void 0 : playerData.color) || 'white');\n\n      // Update game status\n      setInCheck(data.inCheck || false);\n      setPossibleMoves(data.legalMoves || {});\n      if (data.gameOver) {\n        setGameStatus({\n          isGameOver: true,\n          result: data.result\n        });\n      }\n    };\n\n    // Listen for game updates\n    socket.on('game:update', data => {\n      console.log(\"Game update received:\", data.board, data.position);\n      setBoard(data.board);\n      setPosition(data.position);\n      setCurrentTurn(data.currentTurn);\n      setInCheck(data.inCheck || false);\n      setPossibleMoves(data.legalMoves || {});\n      if (data.lastMove) {\n        setMoves(prevMoves => [...prevMoves, data.lastMove]);\n      } else if (data.history) {\n        setMoves(data.history); // fallback khi undo hoặc khi join game\n      }\n      if (data.gameOver) {\n        setGameStatus({\n          isGameOver: true,\n          result: data.result\n        });\n      }\n    });\n\n    // Listen for game data when joining\n    socket.on('game:data', handleGameData);\n\n    // Listen for move validation failures\n    socket.on('game:moveRejected', error => {\n      console.error('Move rejected:', error);\n      // Reset any UI state needed after failed move\n    });\n\n    // Listen for undo declined\n    socket.on('game:undoDeclined', ({\n      by\n    }) => {\n      alert(`${by} đã từ chối yêu cầu undo.`);\n    });\n\n    // Listen for undo confirmed\n    socket.on('game:undoConfirmed', ({\n      by\n    }) => {\n      alert(`${by} đã chấp nhận yêu cầu undo.`);\n    });\n\n    // Listen for undo requested\n    socket.on('game:undoRequested', ({\n      requestedBy\n    }) => {\n      const accept = window.confirm(`${requestedBy} muốn undo. Bạn có đồng ý không?`);\n      socket.emit('game:undoResponse', {\n        gameId,\n        accepted: accept\n      });\n    });\n\n    // Cleanup on unmount\n    return () => {\n      socket.off('game:update');\n      socket.off('game:data');\n      socket.off('game:moveRejected');\n      socket.off('game:undoDeclined');\n      socket.off('game:undoConfirmed');\n      socket.off('game:undoRequested');\n      socket.emit('game:leave', {\n        gameId\n      });\n    };\n  }, [gameId, user]);\n\n  // Handle piece selection and move highlighting\n  const selectPiece = useCallback((piece, position) => {\n    // Only allow selection of the player's own pieces during their turn\n    if (piece && piece.color === playerColor && currentTurn === playerColor) {\n      setSelectedPiece({\n        piece,\n        position\n      });\n      // Highlight possible moves for this piece\n    } else {\n      setSelectedPiece(null);\n    }\n  }, [playerColor, currentTurn]);\n\n  // Make a move\n  const makeMove = useCallback((from, to) => {\n    if (gameStatus.isGameOver || currentTurn !== playerColor) {\n      return false;\n    }\n    setPastPositions(prev => [...prev, position]);\n    setFuturePositions([]);\n\n    // Send move to server\n    socket.emit('game:move', {\n      gameId,\n      from,\n      to\n    });\n    return true;\n  }, [gameId, currentTurn, playerColor, gameStatus.isGameOver, position]);\n\n  // Request undo\n  const undo = useCallback(() => {\n    if (!gameId || gameStatus.isGameOver || currentTurn !== playerColor) {\n      return false;\n    }\n\n    // Send undo request to the server\n    socket.emit('game:requestUndo', {\n      gameId\n    });\n    return true;\n  }, [gameId, currentTurn, playerColor, gameStatus.isGameOver]);\n\n  // Handle redo (typically only for offline or analysis mode)\n  const redo = useCallback(() => {\n    if (futurePositions.length === 0) return;\n    const newPosition = futurePositions[futurePositions.length - 1];\n    setPastPositions(prev => [...prev, position]);\n    setFuturePositions(prev => prev.slice(0, -1));\n    setPosition(newPosition);\n\n    // Emit redo event to server if needed\n    socket.emit('game:redo', {\n      gameId,\n      position: newPosition\n    });\n  }, [futurePositions, position, gameId]);\n\n  // Reset game\n  const reset = useCallback(() => {\n    socket.emit('game:reset', {\n      gameId\n    });\n  }, [gameId]);\n  return {\n    board,\n    position,\n    currentTurn,\n    playerColor,\n    moves,\n    inCheck,\n    possibleMoves,\n    selectedPiece,\n    gameStatus,\n    selectPiece,\n    makeMove,\n    undo,\n    redo,\n    reset\n  };\n};\n\n// Helper function to create initial empty board\n_s(useChess, \"bgEufYVAOPDYPCaHAnuse4DYuUI=\", false, function () {\n  return [useAuth];\n});\nfunction initialBoard() {\n  // Create 8x8 empty board representation\n  return Array(8).fill().map(() => Array(8).fill(null));\n}\nexport default useChess;","map":{"version":3,"names":["useState","useEffect","useCallback","useAuth","socket","useChess","gameId","_s","user","board","setBoard","initialBoard","position","setPosition","moves","setMoves","currentTurn","setCurrentTurn","playerColor","setPlayerColor","possibleMoves","setPossibleMoves","selectedPiece","setSelectedPiece","pastPositions","setPastPositions","futurePositions","setFuturePositions","inCheck","setInCheck","gameStatus","setGameStatus","isGameOver","result","emit","handleGameData","data","playerData","players","find","p","id","color","legalMoves","gameOver","on","console","log","lastMove","prevMoves","history","error","by","alert","requestedBy","accept","window","confirm","accepted","off","selectPiece","piece","makeMove","from","to","prev","undo","redo","length","newPosition","slice","reset","Array","fill","map"],"sources":["/home/sonbx/Documents/Project/Chess_Game/chess_frontend/src/hooks/useChess.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { useAuth } from '../context/AuthContext';\nimport { socket } from '../services/socket';\n\n/**\n * Custom hook to manage chess game state and socket communication\n * @param {string} gameId - The ID of the current game\n * @returns {Object} Chess game state and methods\n */\nconst useChess = (gameId) => {\n  const { user } = useAuth();\n  \n  // Game state\n  const [board, setBoard] = useState(initialBoard());\n  const [position, setPosition] = useState(null);\n  const [moves, setMoves] = useState([]);\n  const [currentTurn, setCurrentTurn] = useState('white');\n  const [playerColor, setPlayerColor] = useState(null);\n  const [possibleMoves, setPossibleMoves] = useState({});\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [pastPositions, setPastPositions] = useState([]);\n  const [futurePositions, setFuturePositions] = useState([]);\n  const [inCheck, setInCheck] = useState(false);\n  const [gameStatus, setGameStatus] = useState({\n    isGameOver: false,\n    result: null\n  });\n  \n  // Initialize game when component mounts\n  useEffect(() => {\n    if (!gameId) return;\n\n    // Join the game\n    socket.emit('game:join', { gameId });\n    \n    // Handle initial game data\n    const handleGameData = (data) => {\n      setBoard(data.board || initialBoard());\n      setPosition(data.position || null);\n      setMoves(data.moves || []);\n      setCurrentTurn(data.currentTurn || 'white');\n      \n      // Set player color based on the player's user ID\n      const playerData = data.players.find(p => p.id === user?.id);\n      setPlayerColor(playerData?.color || 'white');\n      \n      // Update game status\n      setInCheck(data.inCheck || false);\n      setPossibleMoves(data.legalMoves || {});\n\n      if (data.gameOver) {\n        setGameStatus({\n          isGameOver: true,\n          result: data.result\n        });\n      }\n    };\n\n    // Listen for game updates\n    socket.on('game:update', (data) => {\n      console.log(\"Game update received:\", data.board, data.position);\n      setBoard(data.board);\n      setPosition(data.position);\n      setCurrentTurn(data.currentTurn);\n      setInCheck(data.inCheck || false);\n      setPossibleMoves(data.legalMoves || {});\n\n      if (data.lastMove) {\n        setMoves(prevMoves => [...prevMoves, data.lastMove]);\n      } else if (data.history) {\n        setMoves(data.history); // fallback khi undo hoặc khi join game\n      }\n      \n      if (data.gameOver) {\n        setGameStatus({\n          isGameOver: true,\n          result: data.result\n        });\n      }\n    });\n    \n    // Listen for game data when joining\n    socket.on('game:data', handleGameData);\n    \n    // Listen for move validation failures\n    socket.on('game:moveRejected', (error) => {\n      console.error('Move rejected:', error);\n      // Reset any UI state needed after failed move\n    });\n    \n    // Listen for undo declined\n    socket.on('game:undoDeclined', ({ by }) => {\n      alert(`${by} đã từ chối yêu cầu undo.`);\n    });\n    \n    // Listen for undo confirmed\n    socket.on('game:undoConfirmed', ({ by }) => {\n      alert(`${by} đã chấp nhận yêu cầu undo.`);\n    });\n    \n    // Listen for undo requested\n    socket.on('game:undoRequested', ({ requestedBy }) => {\n      const accept = window.confirm(`${requestedBy} muốn undo. Bạn có đồng ý không?`);\n      socket.emit('game:undoResponse', {\n        gameId,\n        accepted: accept\n      });\n    });\n    \n    // Cleanup on unmount\n    return () => {\n      socket.off('game:update');\n      socket.off('game:data');\n      socket.off('game:moveRejected');\n      socket.off('game:undoDeclined');\n      socket.off('game:undoConfirmed');\n      socket.off('game:undoRequested');\n      socket.emit('game:leave', { gameId });\n    };\n  }, [gameId, user]);\n  \n  // Handle piece selection and move highlighting\n  const selectPiece = useCallback((piece, position) => {\n    // Only allow selection of the player's own pieces during their turn\n    if (piece && piece.color === playerColor && currentTurn === playerColor) {\n      setSelectedPiece({ piece, position });\n      // Highlight possible moves for this piece\n    } else {\n      setSelectedPiece(null);\n    }\n  }, [playerColor, currentTurn]);\n  \n  // Make a move\n  const makeMove = useCallback((from, to) => {\n    if (gameStatus.isGameOver || currentTurn !== playerColor) {\n      return false;\n    }\n\n    setPastPositions(prev => [...prev, position]);\n    setFuturePositions([]);\n    \n    // Send move to server\n    socket.emit('game:move', {\n      gameId,\n      from,\n      to\n    });\n    \n    return true;\n  }, [gameId, currentTurn, playerColor, gameStatus.isGameOver, position]);\n  \n  // Request undo\n  const undo = useCallback(() => {\n    if (!gameId || gameStatus.isGameOver || currentTurn !== playerColor) {\n      return false;\n    }\n    \n    // Send undo request to the server\n    socket.emit('game:requestUndo', { gameId });\n  \n    return true;\n  }, [gameId, currentTurn, playerColor, gameStatus.isGameOver]);\n\n  // Handle redo (typically only for offline or analysis mode)\n  const redo = useCallback(() => {\n    if (futurePositions.length === 0) return;\n    \n    const newPosition = futurePositions[futurePositions.length - 1];\n    setPastPositions(prev => [...prev, position]);\n    setFuturePositions(prev => prev.slice(0, -1));\n    setPosition(newPosition);\n    \n    // Emit redo event to server if needed\n    socket.emit('game:redo', { gameId, position: newPosition });\n  }, [futurePositions, position, gameId]);\n  \n  // Reset game\n  const reset = useCallback(() => {\n    socket.emit('game:reset', { gameId });\n  }, [gameId]);\n  \n  return {\n    board,\n    position,\n    currentTurn,\n    playerColor,\n    moves,\n    inCheck,\n    possibleMoves,\n    selectedPiece,\n    gameStatus,\n    selectPiece,\n    makeMove,\n    undo,\n    redo,\n    reset\n  };\n};\n\n// Helper function to create initial empty board\nfunction initialBoard() {\n  // Create 8x8 empty board representation\n  return Array(8).fill().map(() => Array(8).fill(null));\n}\n\nexport default useChess;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}