{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { socket } from '../services/socket';\nconst useChess = gameId => {\n  _s();\n  const [board, setBoard] = useState(initialBoard());\n  const [history, setHistory] = useState([]);\n  const [currentIndex, setCurrentIndex] = useState(-1);\n  const [playerColor, setPlayerColor] = useState('white');\n  const [currentTurn, setCurrentTurn] = useState('white');\n  const [moves, setMoves] = useState([]);\n  const [position, setPosition] = useState(null);\n  const [possibleMoves, setPossibleMoves] = useState({});\n  const [gameStatus, setGameStatus] = useState(null);\n  const [inCheck, setInCheck] = useState(false);\n\n  // Có thể undo nếu có ít nhất một nước đi trong lịch sử và không phải game over\n  const canUndo = currentIndex >= 0 && !(gameStatus !== null && gameStatus !== void 0 && gameStatus.isGameOver);\n\n  // Có thể redo nếu có nước đi trong lịch sử sau vị trí hiện tại\n  const canRedo = currentIndex < history.length - 1;\n\n  // Cập nhật game state từ server\n  useEffect(() => {\n    if (!gameId) return;\n\n    // Thêm kiểm tra kết nối socket\n    console.log(\"Cố gắng kết nối đến game:\", gameId);\n\n    // Lắng nghe sự kiện kết nối\n    const onConnect = () => {\n      console.log(\"Socket đã kết nối thành công\");\n      // Yêu cầu dữ liệu game ban đầu\n      socket.emit(\"game:join\", {\n        gameId\n      });\n    };\n\n    // Lắng nghe sự kiện mất kết nối\n    const onDisconnect = () => {\n      console.log(\"Socket đã mất kết nối\");\n    };\n\n    // Ghi log lỗi socket\n    const onError = error => {\n      console.error(\"Lỗi socket:\", error);\n    };\n\n    // Thêm kiểm tra dữ liệu từ server\n    const onGameUpdate = data => {\n      var _data$position;\n      console.log(\"Nhận dữ liệu game từ server:\", data);\n\n      // Kiểm tra dữ liệu board\n      if (!data.board || !Array.isArray(data.board)) {\n        console.error(\"Dữ liệu board không hợp lệ:\", data.board);\n        // Giữ nguyên bàn cờ hiện tại hoặc sử dụng bàn cờ mặc định\n        // setBoard(initialBoard());\n        return;\n      }\n\n      // Log dữ liệu để debug\n      console.log(\"Bàn cờ mới:\", data.board);\n      console.log(\"Lượt chơi:\", data.currentTurn);\n      console.log(\"Nước đi hợp lệ:\", data.possibleMoves);\n\n      // Cập nhật state\n      setBoard(data.board);\n      setPlayerColor(data.playerColor);\n      setCurrentTurn(data.currentTurn);\n      setMoves(data.moves);\n      setPosition(data.position);\n      setPossibleMoves(data.possibleMoves);\n      setInCheck(!!((_data$position = data.position) !== null && _data$position !== void 0 && _data$position.inCheck));\n\n      // Cập nhật lịch sử nước đi\n      if (data.history) {\n        setHistory(data.history);\n        setCurrentIndex(data.history.length - 1);\n      }\n    };\n\n    // Đăng ký các sự kiện\n    socket.on(\"connect\", onConnect);\n    socket.on(\"disconnect\", onDisconnect);\n    socket.on(\"error\", onError);\n    socket.on(\"game:update\", onGameUpdate);\n    socket.on(\"game:status\", status => {\n      console.log(\"Nhận trạng thái game:\", status);\n      setGameStatus(status);\n    });\n\n    // Kiểm tra xem socket đã kết nối chưa\n    if (socket.connected) {\n      console.log(\"Socket đã kết nối sẵn, gửi yêu cầu join game\");\n      socket.emit(\"game:join\", {\n        gameId\n      });\n    }\n\n    // Clean up\n    return () => {\n      console.log(\"Hủy đăng ký các sự kiện socket\");\n      socket.off(\"connect\", onConnect);\n      socket.off(\"disconnect\", onDisconnect);\n      socket.off(\"error\", onError);\n      socket.off(\"game:update\", onGameUpdate);\n      socket.off(\"game:status\");\n    };\n  }, [gameId]);\n\n  // Thực hiện nước đi\n  const makeMove = useCallback((from, to) => {\n    socket.emit(\"game:move\", {\n      gameId,\n      from,\n      to\n    });\n  }, [gameId]);\n\n  // Undo nước đi\n  const undo = useCallback(() => {\n    if (canUndo) {\n      socket.emit(\"game:undo\", {\n        gameId\n      });\n    }\n  }, [gameId, canUndo]);\n\n  // Redo nước đi\n  const redo = useCallback(() => {\n    if (canRedo) {\n      socket.emit(\"game:redo\", {\n        gameId\n      });\n    }\n  }, [gameId, canRedo]);\n\n  // Reset game\n  const reset = useCallback(() => {\n    socket.emit(\"game:reset\", {\n      gameId\n    });\n  }, [gameId]);\n  return {\n    board,\n    playerColor,\n    currentTurn,\n    moves,\n    position,\n    possibleMoves,\n    inCheck,\n    gameStatus,\n    makeMove,\n    undo,\n    redo,\n    reset,\n    canUndo,\n    canRedo\n  };\n};\n\n// Tạo bàn cờ ban đầu\n_s(useChess, \"5dT0XJ3IdpoXP73SqAJRaGD33dM=\");\nfunction initialBoard() {\n  const board = Array(8).fill(null).map(() => Array(8).fill(null));\n\n  // Thêm quân tốt\n  for (let i = 0; i < 8; i++) {\n    board[1][i] = {\n      type: 'p',\n      color: 'black'\n    };\n    board[6][i] = {\n      type: 'p',\n      color: 'white'\n    };\n  }\n\n  // Thêm quân cờ hàng sau\n  const backRank = ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'];\n  for (let i = 0; i < 8; i++) {\n    board[0][i] = {\n      type: backRank[i],\n      color: 'black'\n    };\n    board[7][i] = {\n      type: backRank[i],\n      color: 'white'\n    };\n  }\n  return board;\n}\nexport default useChess;","map":{"version":3,"names":["useState","useEffect","useCallback","socket","useChess","gameId","_s","board","setBoard","initialBoard","history","setHistory","currentIndex","setCurrentIndex","playerColor","setPlayerColor","currentTurn","setCurrentTurn","moves","setMoves","position","setPosition","possibleMoves","setPossibleMoves","gameStatus","setGameStatus","inCheck","setInCheck","canUndo","isGameOver","canRedo","length","console","log","onConnect","emit","onDisconnect","onError","error","onGameUpdate","data","_data$position","Array","isArray","on","status","connected","off","makeMove","from","to","undo","redo","reset","fill","map","i","type","color","backRank"],"sources":["C:/Users/sonbx/Chess_Game/chess_frontend/src/hooks/useChess.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\nimport { socket } from '../services/socket';\r\n\r\nconst useChess = (gameId) => {\r\n  const [board, setBoard] = useState(initialBoard());\r\n  const [history, setHistory] = useState([]);\r\n  const [currentIndex, setCurrentIndex] = useState(-1);\r\n  const [playerColor, setPlayerColor] = useState('white');\r\n  const [currentTurn, setCurrentTurn] = useState('white');\r\n  const [moves, setMoves] = useState([]);\r\n  const [position, setPosition] = useState(null);\r\n  const [possibleMoves, setPossibleMoves] = useState({});\r\n  const [gameStatus, setGameStatus] = useState(null);\r\n  const [inCheck, setInCheck] = useState(false);\r\n  \r\n  // Có thể undo nếu có ít nhất một nước đi trong lịch sử và không phải game over\r\n  const canUndo = currentIndex >= 0 && !gameStatus?.isGameOver;\r\n  \r\n  // Có thể redo nếu có nước đi trong lịch sử sau vị trí hiện tại\r\n  const canRedo = currentIndex < history.length - 1;\r\n  \r\n  // Cập nhật game state từ server\r\n  useEffect(() => {\r\n    if (!gameId) return;\r\n    \r\n    // Thêm kiểm tra kết nối socket\r\n    console.log(\"Cố gắng kết nối đến game:\", gameId);\r\n    \r\n    // Lắng nghe sự kiện kết nối\r\n    const onConnect = () => {\r\n      console.log(\"Socket đã kết nối thành công\");\r\n      // Yêu cầu dữ liệu game ban đầu\r\n      socket.emit(\"game:join\", { gameId });\r\n    };\r\n    \r\n    // Lắng nghe sự kiện mất kết nối\r\n    const onDisconnect = () => {\r\n      console.log(\"Socket đã mất kết nối\");\r\n    };\r\n    \r\n    // Ghi log lỗi socket\r\n    const onError = (error) => {\r\n      console.error(\"Lỗi socket:\", error);\r\n    };\r\n    \r\n    // Thêm kiểm tra dữ liệu từ server\r\n    const onGameUpdate = (data) => {\r\n      console.log(\"Nhận dữ liệu game từ server:\", data);\r\n      \r\n      // Kiểm tra dữ liệu board\r\n      if (!data.board || !Array.isArray(data.board)) {\r\n        console.error(\"Dữ liệu board không hợp lệ:\", data.board);\r\n        // Giữ nguyên bàn cờ hiện tại hoặc sử dụng bàn cờ mặc định\r\n        // setBoard(initialBoard());\r\n        return;\r\n      }\r\n      \r\n      // Log dữ liệu để debug\r\n      console.log(\"Bàn cờ mới:\", data.board);\r\n      console.log(\"Lượt chơi:\", data.currentTurn);\r\n      console.log(\"Nước đi hợp lệ:\", data.possibleMoves);\r\n      \r\n      // Cập nhật state\r\n      setBoard(data.board);\r\n      setPlayerColor(data.playerColor);\r\n      setCurrentTurn(data.currentTurn);\r\n      setMoves(data.moves);\r\n      setPosition(data.position);\r\n      setPossibleMoves(data.possibleMoves);\r\n      setInCheck(!!data.position?.inCheck);\r\n      \r\n      // Cập nhật lịch sử nước đi\r\n      if (data.history) {\r\n        setHistory(data.history);\r\n        setCurrentIndex(data.history.length - 1);\r\n      }\r\n    };\r\n    \r\n    // Đăng ký các sự kiện\r\n    socket.on(\"connect\", onConnect);\r\n    socket.on(\"disconnect\", onDisconnect);\r\n    socket.on(\"error\", onError);\r\n    socket.on(\"game:update\", onGameUpdate);\r\n    socket.on(\"game:status\", (status) => {\r\n      console.log(\"Nhận trạng thái game:\", status);\r\n      setGameStatus(status);\r\n    });\r\n    \r\n    // Kiểm tra xem socket đã kết nối chưa\r\n    if (socket.connected) {\r\n      console.log(\"Socket đã kết nối sẵn, gửi yêu cầu join game\");\r\n      socket.emit(\"game:join\", { gameId });\r\n    }\r\n\r\n    // Clean up\r\n    return () => {\r\n      console.log(\"Hủy đăng ký các sự kiện socket\");\r\n      socket.off(\"connect\", onConnect);\r\n      socket.off(\"disconnect\", onDisconnect);\r\n      socket.off(\"error\", onError);\r\n      socket.off(\"game:update\", onGameUpdate);\r\n      socket.off(\"game:status\");\r\n    };\r\n  }, [gameId]);\r\n  \r\n  // Thực hiện nước đi\r\n  const makeMove = useCallback((from, to) => {\r\n    socket.emit(\"game:move\", { gameId, from, to });\r\n  }, [gameId]);\r\n  \r\n  // Undo nước đi\r\n  const undo = useCallback(() => {\r\n    if (canUndo) {\r\n      socket.emit(\"game:undo\", { gameId });\r\n    }\r\n  }, [gameId, canUndo]);\r\n  \r\n  // Redo nước đi\r\n  const redo = useCallback(() => {\r\n    if (canRedo) {\r\n      socket.emit(\"game:redo\", { gameId });\r\n    }\r\n  }, [gameId, canRedo]);\r\n  \r\n  // Reset game\r\n  const reset = useCallback(() => {\r\n    socket.emit(\"game:reset\", { gameId });\r\n  }, [gameId]);\r\n  \r\n  return {\r\n    board,\r\n    playerColor,\r\n    currentTurn,\r\n    moves,\r\n    position,\r\n    possibleMoves,\r\n    inCheck,\r\n    gameStatus,\r\n    makeMove,\r\n    undo,\r\n    redo,\r\n    reset,\r\n    canUndo,\r\n    canRedo\r\n  };\r\n};\r\n\r\n// Tạo bàn cờ ban đầu\r\nfunction initialBoard() {\r\n  const board = Array(8).fill(null).map(() => Array(8).fill(null));\r\n  \r\n  // Thêm quân tốt\r\n  for (let i = 0; i < 8; i++) {\r\n    board[1][i] = { type: 'p', color: 'black' };\r\n    board[6][i] = { type: 'p', color: 'white' };\r\n  }\r\n  \r\n  // Thêm quân cờ hàng sau\r\n  const backRank = ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'];\r\n  for (let i = 0; i < 8; i++) {\r\n    board[0][i] = { type: backRank[i], color: 'black' };\r\n    board[7][i] = { type: backRank[i], color: 'white' };\r\n  }\r\n  \r\n  return board;\r\n}\r\n\r\nexport default useChess;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}