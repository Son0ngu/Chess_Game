{"ast":null,"code":"import { distinctUntilChanged } from './distinctUntilChanged';\nexport function distinctUntilKeyChanged(key, compare) {\n  return distinctUntilChanged(function (x, y) {\n    return compare ? compare(x[key], y[key]) : x[key] === y[key];\n  });\n}","map":{"version":3,"names":["distinctUntilChanged","distinctUntilKeyChanged","key","compare","x","y"],"sources":["C:\\Users\\sonbx\\Chess_Game\\chess_frontend\\node_modules\\rxjs\\src\\internal\\operators\\distinctUntilKeyChanged.ts"],"sourcesContent":["import { distinctUntilChanged } from './distinctUntilChanged';\r\nimport { MonoTypeOperatorFunction } from '../types';\r\n\r\nexport function distinctUntilKeyChanged<T>(key: keyof T): MonoTypeOperatorFunction<T>;\r\nexport function distinctUntilKeyChanged<T, K extends keyof T>(key: K, compare: (x: T[K], y: T[K]) => boolean): MonoTypeOperatorFunction<T>;\r\n\r\n/**\r\n * Returns an Observable that emits all items emitted by the source Observable that\r\n * are distinct by comparison from the previous item, using a property accessed by\r\n * using the key provided to check if the two items are distinct.\r\n *\r\n * If a comparator function is provided, then it will be called for each item to\r\n * test for whether that value should be emitted or not.\r\n *\r\n * If a comparator function is not provided, an equality check is used by default.\r\n *\r\n * ## Examples\r\n *\r\n * An example comparing the name of persons\r\n *\r\n * ```ts\r\n * import { of, distinctUntilKeyChanged } from 'rxjs';\r\n *\r\n * of(\r\n *   { age: 4, name: 'Foo' },\r\n *   { age: 7, name: 'Bar' },\r\n *   { age: 5, name: 'Foo' },\r\n *   { age: 6, name: 'Foo' }\r\n * ).pipe(\r\n *   distinctUntilKeyChanged('name')\r\n * )\r\n * .subscribe(x => console.log(x));\r\n *\r\n * // displays:\r\n * // { age: 4, name: 'Foo' }\r\n * // { age: 7, name: 'Bar' }\r\n * // { age: 5, name: 'Foo' }\r\n * ```\r\n *\r\n * An example comparing the first letters of the name\r\n *\r\n * ```ts\r\n * import { of, distinctUntilKeyChanged } from 'rxjs';\r\n *\r\n * of(\r\n *   { age: 4, name: 'Foo1' },\r\n *   { age: 7, name: 'Bar' },\r\n *   { age: 5, name: 'Foo2' },\r\n *   { age: 6, name: 'Foo3' }\r\n * ).pipe(\r\n *   distinctUntilKeyChanged('name', (x, y) => x.substring(0, 3) === y.substring(0, 3))\r\n * )\r\n * .subscribe(x => console.log(x));\r\n *\r\n * // displays:\r\n * // { age: 4, name: 'Foo1' }\r\n * // { age: 7, name: 'Bar' }\r\n * // { age: 5, name: 'Foo2' }\r\n * ```\r\n *\r\n * @see {@link distinct}\r\n * @see {@link distinctUntilChanged}\r\n *\r\n * @param key String key for object property lookup on each item.\r\n * @param compare Optional comparison function called to test if an item is distinct\r\n * from the previous item in the source.\r\n * @return A function that returns an Observable that emits items from the source\r\n * Observable with distinct values based on the key specified.\r\n */\r\nexport function distinctUntilKeyChanged<T, K extends keyof T>(\r\n  key: K,\r\n  compare?: (x: T[K], y: T[K]) => boolean\r\n): MonoTypeOperatorFunction<T> {\r\n  return distinctUntilChanged((x: T, y: T) => (compare ? compare(x[key], y[key]) : x[key] === y[key]));\r\n}\r\n"],"mappings":"AAAA,SAASA,oBAAoB,QAAQ,wBAAwB;AAqE7D,OAAM,SAAUC,uBAAuBA,CACrCC,GAAM,EACNC,OAAuC;EAEvC,OAAOH,oBAAoB,CAAC,UAACI,CAAI,EAAEC,CAAI;IAAK,OAACF,OAAO,GAAGA,OAAO,CAACC,CAAC,CAACF,GAAG,CAAC,EAAEG,CAAC,CAACH,GAAG,CAAC,CAAC,GAAGE,CAAC,CAACF,GAAG,CAAC,KAAKG,CAAC,CAACH,GAAG,CAAC;EAAtD,CAAuD,CAAC;AACtG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}