{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sonbx\\\\Chess_Game\\\\chess_frontend\\\\src\\\\components\\\\Board.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\nimport '../styles/Board.css';\nimport Piece from './Piece';\nimport Square from './Square';\nimport BoardCoordinates from './BoardCoordinates';\nimport BoardRow from './BoardRow';\n\n// Main chess board component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Board = ({\n  board,\n  position,\n  playerColor = 'white',\n  possibleMoves = {},\n  onMove,\n  disabled = false\n}) => {\n  _s();\n  const [selectedSquare, setSelectedSquare] = useState(null);\n\n  // Convert algebraic notation (e.g., \"e4\") to coordinates [row, col]\n  const algebraicToCoords = useCallback(algebraic => {\n    if (!algebraic || algebraic.length !== 2) return null;\n    const col = algebraic.charCodeAt(0) - 'a'.charCodeAt(0);\n    const row = 8 - parseInt(algebraic[1], 10);\n    return [row, col];\n  }, []);\n\n  // Convert coordinates [row, col] to algebraic notation (e.g., \"e4\")\n  const coordsToAlgebraic = useCallback((row, col) => {\n    if (row < 0 || row > 7 || col < 0 || col > 7) return null;\n    const file = String.fromCharCode('a'.charCodeAt(0) + col);\n    const rank = 8 - row;\n    return `${file}${rank}`;\n  }, []);\n\n  // Handle square click for piece selection or move\n  const handleSquareClick = useCallback(clickedPosition => {\n    if (disabled) return;\n    const coords = algebraicToCoords(clickedPosition);\n    if (!coords) return;\n    const [row, col] = coords;\n    const clickedPiece = board[row][col];\n\n    // If a square was already selected\n    if (selectedSquare) {\n      // If clicking on a different square, try to move the piece\n      if (selectedSquare !== clickedPosition) {\n        onMove(selectedSquare, clickedPosition);\n      }\n      // Clear the selection in any case\n      setSelectedSquare(null);\n    } else if (clickedPiece && clickedPiece.color === playerColor) {\n      // Select the piece if it belongs to the player\n      setSelectedSquare(clickedPosition);\n    }\n  }, [board, selectedSquare, playerColor, onMove, algebraicToCoords, disabled]);\n\n  // Handle piece drop (for drag and drop)\n  const handleDrop = useCallback((fromPosition, toPosition) => {\n    if (disabled) return;\n    onMove(fromPosition, toPosition);\n  }, [onMove, disabled]);\n\n  // Determine if a position has a possible move (for highlighting)\n  const isPossibleMovePosition = useCallback(position => {\n    if (!selectedSquare || !possibleMoves[selectedSquare]) return false;\n    return possibleMoves[selectedSquare].includes(position);\n  }, [selectedSquare, possibleMoves]);\n\n  // Generate the chess board with proper orientation\n  const renderBoard = () => {\n    const isFlipped = playerColor === 'black';\n    let rows = Array(8).fill(null).map((_, i) => i);\n    let cols = Array(8).fill(null).map((_, i) => i);\n    if (isFlipped) {\n      rows = rows.reverse();\n      cols = cols.reverse();\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chess-board\",\n      children: [rows.map(row => /*#__PURE__*/_jsxDEV(BoardRow, {\n        rowIndex: row,\n        cols: cols,\n        board: board,\n        isFlipped: isFlipped,\n        playerColor: playerColor,\n        disabled: disabled,\n        coordsToAlgebraic: coordsToAlgebraic,\n        position: position,\n        handleSquareClick: handleSquareClick,\n        handleDrop: handleDrop,\n        isPossibleMovePosition: isPossibleMovePosition\n      }, row, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(BoardCoordinates, {\n        type: \"files\",\n        playerColor: playerColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BoardCoordinates, {\n        type: \"ranks\",\n        playerColor: playerColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `board-container ${disabled ? 'disabled' : ''}`,\n    children: renderBoard()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n_s(Board, \"mW0SDLvCXEqUPOQ7xbpIclWoe8Q=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","useCallback","Piece","Square","BoardCoordinates","BoardRow","jsxDEV","_jsxDEV","Board","board","position","playerColor","possibleMoves","onMove","disabled","_s","selectedSquare","setSelectedSquare","algebraicToCoords","algebraic","length","col","charCodeAt","row","parseInt","coordsToAlgebraic","file","String","fromCharCode","rank","handleSquareClick","clickedPosition","coords","clickedPiece","color","handleDrop","fromPosition","toPosition","isPossibleMovePosition","includes","renderBoard","isFlipped","rows","Array","fill","map","_","i","cols","reverse","className","children","rowIndex","fileName","_jsxFileName","lineNumber","columnNumber","type","_c","$RefreshReg$"],"sources":["C:/Users/sonbx/Chess_Game/chess_frontend/src/components/Board.jsx"],"sourcesContent":["import React, { useState, useCallback } from 'react';\r\nimport '../styles/Board.css';\r\nimport Piece from './Piece';\r\nimport Square from './Square';\r\nimport BoardCoordinates from './BoardCoordinates';\r\nimport BoardRow from './BoardRow';\r\n\r\n// Main chess board component\r\nconst Board = ({ \r\n  board, \r\n  position, \r\n  playerColor = 'white', \r\n  possibleMoves = {},\r\n  onMove,\r\n  disabled = false \r\n}) => {\r\n  const [selectedSquare, setSelectedSquare] = useState(null);\r\n  \r\n  // Convert algebraic notation (e.g., \"e4\") to coordinates [row, col]\r\n  const algebraicToCoords = useCallback((algebraic) => {\r\n    if (!algebraic || algebraic.length !== 2) return null;\r\n    const col = algebraic.charCodeAt(0) - 'a'.charCodeAt(0);\r\n    const row = 8 - parseInt(algebraic[1], 10);\r\n    return [row, col];\r\n  }, []);\r\n  \r\n  // Convert coordinates [row, col] to algebraic notation (e.g., \"e4\")\r\n  const coordsToAlgebraic = useCallback((row, col) => {\r\n    if (row < 0 || row > 7 || col < 0 || col > 7) return null;\r\n    const file = String.fromCharCode('a'.charCodeAt(0) + col);\r\n    const rank = 8 - row;\r\n    return `${file}${rank}`;\r\n  }, []);\r\n\r\n  // Handle square click for piece selection or move\r\n  const handleSquareClick = useCallback((clickedPosition) => {\r\n    if (disabled) return;\r\n\r\n    const coords = algebraicToCoords(clickedPosition);\r\n    if (!coords) return;\r\n    \r\n    const [row, col] = coords;\r\n    const clickedPiece = board[row][col];\r\n\r\n    // If a square was already selected\r\n    if (selectedSquare) {\r\n      // If clicking on a different square, try to move the piece\r\n      if (selectedSquare !== clickedPosition) {\r\n        onMove(selectedSquare, clickedPosition);\r\n      }\r\n      // Clear the selection in any case\r\n      setSelectedSquare(null);\r\n    } else if (clickedPiece && clickedPiece.color === playerColor) {\r\n      // Select the piece if it belongs to the player\r\n      setSelectedSquare(clickedPosition);\r\n    }\r\n  }, [board, selectedSquare, playerColor, onMove, algebraicToCoords, disabled]);\r\n\r\n  // Handle piece drop (for drag and drop)\r\n  const handleDrop = useCallback((fromPosition, toPosition) => {\r\n    if (disabled) return;\r\n    onMove(fromPosition, toPosition);\r\n  }, [onMove, disabled]);\r\n\r\n  // Determine if a position has a possible move (for highlighting)\r\n  const isPossibleMovePosition = useCallback((position) => {\r\n    if (!selectedSquare || !possibleMoves[selectedSquare]) return false;\r\n    return possibleMoves[selectedSquare].includes(position);\r\n  }, [selectedSquare, possibleMoves]);\r\n\r\n  // Generate the chess board with proper orientation\r\n  const renderBoard = () => {\r\n    const isFlipped = playerColor === 'black';\r\n    let rows = Array(8).fill(null).map((_, i) => i);\r\n    let cols = Array(8).fill(null).map((_, i) => i);\r\n    \r\n    if (isFlipped) {\r\n      rows = rows.reverse();\r\n      cols = cols.reverse();\r\n    }\r\n    \r\n    return (\r\n      <div className=\"chess-board\">\r\n        {rows.map(row => (\r\n          <BoardRow \r\n            key={row}\r\n            rowIndex={row}\r\n            cols={cols}\r\n            board={board}\r\n            isFlipped={isFlipped}\r\n            playerColor={playerColor}\r\n            disabled={disabled}\r\n            coordsToAlgebraic={coordsToAlgebraic}\r\n            position={position}\r\n            handleSquareClick={handleSquareClick}\r\n            handleDrop={handleDrop}\r\n            isPossibleMovePosition={isPossibleMovePosition}\r\n          />\r\n        ))}\r\n        \r\n        <BoardCoordinates type=\"files\" playerColor={playerColor} />\r\n        <BoardCoordinates type=\"ranks\" playerColor={playerColor} />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className={`board-container ${disabled ? 'disabled' : ''}`}>\r\n      {renderBoard()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}