{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sonbx\\\\Chess_Game\\\\chess_frontend\\\\src\\\\components\\\\Board.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\nimport '../styles/Board.css';\n\n// Chess piece component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Piece = ({\n  piece,\n  position,\n  canDrag\n}) => {\n  _s();\n  const [{\n    isDragging\n  }, drag] = useDrag({\n    type: 'piece',\n    item: {\n      piece,\n      position\n    },\n    canDrag: () => canDrag,\n    collect: monitor => ({\n      isDragging: !!monitor.isDragging()\n    })\n  });\n\n  // Map piece type and color to piece images/symbols\n  const getPieceSymbol = (type, color) => {\n    const symbols = {\n      'king': color === 'white' ? '♔' : '♚',\n      'queen': color === 'white' ? '♕' : '♛',\n      'rook': color === 'white' ? '♖' : '♜',\n      'bishop': color === 'white' ? '♗' : '♝',\n      'knight': color === 'white' ? '♘' : '♞',\n      'pawn': color === 'white' ? '♙' : '♟'\n    };\n    return symbols[type] || '';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `piece ${piece.color} ${piece.type} ${isDragging ? 'dragging' : ''}`,\n    ref: canDrag ? drag : null,\n    style: {\n      opacity: isDragging ? 0.5 : 1\n    },\n    children: getPieceSymbol(piece.type, piece.color)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n\n// Chess square component\n_s(Piece, \"wuumsFp4qAni9XRJfRhQAZjuD/k=\", false, function () {\n  return [useDrag];\n});\n_c = Piece;\nconst Square = ({\n  position,\n  color,\n  children,\n  onDrop,\n  onClick,\n  isPossibleMove,\n  isCheck\n}) => {\n  _s2();\n  const [, drop] = useDrop({\n    accept: 'piece',\n    drop: item => onDrop(item.position, position)\n  });\n\n  // Create the className for styling\n  const squareClass = ['square', color, isPossibleMove ? 'possible-move' : '', isCheck ? 'check' : ''].filter(Boolean).join(' ');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: squareClass,\n    ref: drop,\n    onClick: () => onClick(position),\n    \"data-position\": position,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n// Main chess board component\n_s2(Square, \"hdmCamxlwL9WeSdzgzIVyaE48AI=\", false, function () {\n  return [useDrop];\n});\n_c2 = Square;\nconst Board = ({\n  board,\n  position,\n  playerColor = 'white',\n  possibleMoves = {},\n  onMove,\n  disabled = false\n}) => {\n  _s3();\n  const [selectedSquare, setSelectedSquare] = useState(null);\n\n  // Convert algebraic notation (e.g., \"e4\") to coordinates [row, col]\n  const algebraicToCoords = useCallback(algebraic => {\n    if (!algebraic || algebraic.length !== 2) return null;\n    const col = algebraic.charCodeAt(0) - 'a'.charCodeAt(0);\n    const row = 8 - parseInt(algebraic[1], 10);\n    return [row, col];\n  }, []);\n\n  // Convert coordinates [row, col] to algebraic notation (e.g., \"e4\")\n  const coordsToAlgebraic = useCallback((row, col) => {\n    if (row < 0 || row > 7 || col < 0 || col > 7) return null;\n    const file = String.fromCharCode('a'.charCodeAt(0) + col);\n    const rank = 8 - row;\n    return `${file}${rank}`;\n  }, []);\n\n  // Handle square click for piece selection or move\n  const handleSquareClick = useCallback(clickedPosition => {\n    if (disabled) return;\n    const coords = algebraicToCoords(clickedPosition);\n    if (!coords) return;\n    const [row, col] = coords;\n    const clickedPiece = board[row][col];\n\n    // If a square was already selected\n    if (selectedSquare) {\n      // If clicking on a different square, try to move the piece\n      if (selectedSquare !== clickedPosition) {\n        onMove(selectedSquare, clickedPosition);\n      }\n      // Clear the selection in any case\n      setSelectedSquare(null);\n    } else if (clickedPiece && clickedPiece.color === playerColor) {\n      // Select the piece if it belongs to the player\n      setSelectedSquare(clickedPosition);\n    }\n  }, [board, selectedSquare, playerColor, onMove, algebraicToCoords, disabled]);\n\n  // Handle piece drop (for drag and drop)\n  const handleDrop = useCallback((fromPosition, toPosition) => {\n    if (disabled) return;\n    onMove(fromPosition, toPosition);\n  }, [onMove, disabled]);\n\n  // Determine if a position has a possible move (for highlighting)\n  const isPossibleMovePosition = useCallback(position => {\n    if (!selectedSquare || !possibleMoves[selectedSquare]) return false;\n    return possibleMoves[selectedSquare].includes(position);\n  }, [selectedSquare, possibleMoves]);\n\n  // Generate the chess board with proper orientation\n  const renderBoard = () => {\n    const isFlipped = playerColor === 'black';\n    let rows = Array(8).fill(null).map((_, i) => i);\n    let cols = Array(8).fill(null).map((_, i) => i);\n    if (isFlipped) {\n      rows = rows.reverse();\n      cols = cols.reverse();\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chess-board\",\n      children: [rows.map(row => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: cols.map(col => {\n          const isLightSquare = (row + col) % 2 === 0;\n          const algebraicPosition = coordsToAlgebraic(isFlipped ? 7 - row : row, isFlipped ? 7 - col : col);\n          const piece = board[isFlipped ? 7 - row : row][isFlipped ? 7 - col : col];\n          const isCheck = position && position.inCheck && piece && piece.type === 'king' && piece.color === position.inCheck;\n          return /*#__PURE__*/_jsxDEV(Square, {\n            position: algebraicPosition,\n            color: isLightSquare ? 'light' : 'dark',\n            onDrop: handleDrop,\n            onClick: handleSquareClick,\n            isPossibleMove: isPossibleMovePosition(algebraicPosition),\n            isCheck: isCheck,\n            children: piece && /*#__PURE__*/_jsxDEV(Piece, {\n              piece: piece,\n              position: algebraicPosition,\n              canDrag: !disabled && piece.color === playerColor\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 21\n            }, this)\n          }, col, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 17\n          }, this);\n        })\n      }, row, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-coordinates files\",\n        children: isFlipped ? ['h', 'g', 'f', 'e', 'd', 'c', 'b', 'a'].map(file => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: file\n        }, file, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 66\n        }, this)) : ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'].map(file => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: file\n        }, file, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 66\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-coordinates ranks\",\n        children: isFlipped ? [1, 2, 3, 4, 5, 6, 7, 8].map(rank => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: rank\n        }, rank, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 50\n        }, this)) : [8, 7, 6, 5, 4, 3, 2, 1].map(rank => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: rank\n        }, rank, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 50\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `board-container ${disabled ? 'disabled' : ''}`,\n    children: renderBoard()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 5\n  }, this);\n};\n_s3(Board, \"mW0SDLvCXEqUPOQ7xbpIclWoe8Q=\");\n_c3 = Board;\nexport default Board;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Piece\");\n$RefreshReg$(_c2, \"Square\");\n$RefreshReg$(_c3, \"Board\");","map":{"version":3,"names":["React","useState","useCallback","useDrag","useDrop","jsxDEV","_jsxDEV","Piece","piece","position","canDrag","_s","isDragging","drag","type","item","collect","monitor","getPieceSymbol","color","symbols","className","ref","style","opacity","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Square","onDrop","onClick","isPossibleMove","isCheck","_s2","drop","accept","squareClass","filter","Boolean","join","_c2","Board","board","playerColor","possibleMoves","onMove","disabled","_s3","selectedSquare","setSelectedSquare","algebraicToCoords","algebraic","length","col","charCodeAt","row","parseInt","coordsToAlgebraic","file","String","fromCharCode","rank","handleSquareClick","clickedPosition","coords","clickedPiece","handleDrop","fromPosition","toPosition","isPossibleMovePosition","includes","renderBoard","isFlipped","rows","Array","fill","map","_","i","cols","reverse","isLightSquare","algebraicPosition","inCheck","_c3","$RefreshReg$"],"sources":["C:/Users/sonbx/Chess_Game/chess_frontend/src/components/Board.jsx"],"sourcesContent":["import React, { useState, useCallback } from 'react';\r\nimport { useDrag, useDrop } from 'react-dnd';\r\nimport '../styles/Board.css';\r\n\r\n// Chess piece component\r\nconst Piece = ({ piece, position, canDrag }) => {\r\n  const [{ isDragging }, drag] = useDrag({\r\n    type: 'piece',\r\n    item: { piece, position },\r\n    canDrag: () => canDrag,\r\n    collect: monitor => ({\r\n      isDragging: !!monitor.isDragging(),\r\n    }),\r\n  });\r\n\r\n  // Map piece type and color to piece images/symbols\r\n  const getPieceSymbol = (type, color) => {\r\n    const symbols = {\r\n      'king': color === 'white' ? '♔' : '♚',\r\n      'queen': color === 'white' ? '♕' : '♛',\r\n      'rook': color === 'white' ? '♖' : '♜',\r\n      'bishop': color === 'white' ? '♗' : '♝',\r\n      'knight': color === 'white' ? '♘' : '♞',\r\n      'pawn': color === 'white' ? '♙' : '♟',\r\n    };\r\n    return symbols[type] || '';\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`piece ${piece.color} ${piece.type} ${isDragging ? 'dragging' : ''}`}\r\n      ref={canDrag ? drag : null}\r\n      style={{ opacity: isDragging ? 0.5 : 1 }}\r\n    >\r\n      {getPieceSymbol(piece.type, piece.color)}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Chess square component\r\nconst Square = ({ position, color, children, onDrop, onClick, isPossibleMove, isCheck }) => {\r\n  const [, drop] = useDrop({\r\n    accept: 'piece',\r\n    drop: (item) => onDrop(item.position, position),\r\n  });\r\n\r\n  // Create the className for styling\r\n  const squareClass = [\r\n    'square',\r\n    color,\r\n    isPossibleMove ? 'possible-move' : '',\r\n    isCheck ? 'check' : '',\r\n  ].filter(Boolean).join(' ');\r\n\r\n  return (\r\n    <div\r\n      className={squareClass}\r\n      ref={drop}\r\n      onClick={() => onClick(position)}\r\n      data-position={position}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Main chess board component\r\nconst Board = ({ \r\n  board, \r\n  position, \r\n  playerColor = 'white', \r\n  possibleMoves = {},\r\n  onMove,\r\n  disabled = false \r\n}) => {\r\n  const [selectedSquare, setSelectedSquare] = useState(null);\r\n  \r\n  // Convert algebraic notation (e.g., \"e4\") to coordinates [row, col]\r\n  const algebraicToCoords = useCallback((algebraic) => {\r\n    if (!algebraic || algebraic.length !== 2) return null;\r\n    const col = algebraic.charCodeAt(0) - 'a'.charCodeAt(0);\r\n    const row = 8 - parseInt(algebraic[1], 10);\r\n    return [row, col];\r\n  }, []);\r\n  \r\n  // Convert coordinates [row, col] to algebraic notation (e.g., \"e4\")\r\n  const coordsToAlgebraic = useCallback((row, col) => {\r\n    if (row < 0 || row > 7 || col < 0 || col > 7) return null;\r\n    const file = String.fromCharCode('a'.charCodeAt(0) + col);\r\n    const rank = 8 - row;\r\n    return `${file}${rank}`;\r\n  }, []);\r\n\r\n  // Handle square click for piece selection or move\r\n  const handleSquareClick = useCallback((clickedPosition) => {\r\n    if (disabled) return;\r\n\r\n    const coords = algebraicToCoords(clickedPosition);\r\n    if (!coords) return;\r\n    \r\n    const [row, col] = coords;\r\n    const clickedPiece = board[row][col];\r\n\r\n    // If a square was already selected\r\n    if (selectedSquare) {\r\n      // If clicking on a different square, try to move the piece\r\n      if (selectedSquare !== clickedPosition) {\r\n        onMove(selectedSquare, clickedPosition);\r\n      }\r\n      // Clear the selection in any case\r\n      setSelectedSquare(null);\r\n    } else if (clickedPiece && clickedPiece.color === playerColor) {\r\n      // Select the piece if it belongs to the player\r\n      setSelectedSquare(clickedPosition);\r\n    }\r\n  }, [board, selectedSquare, playerColor, onMove, algebraicToCoords, disabled]);\r\n\r\n  // Handle piece drop (for drag and drop)\r\n  const handleDrop = useCallback((fromPosition, toPosition) => {\r\n    if (disabled) return;\r\n    onMove(fromPosition, toPosition);\r\n  }, [onMove, disabled]);\r\n\r\n  // Determine if a position has a possible move (for highlighting)\r\n  const isPossibleMovePosition = useCallback((position) => {\r\n    if (!selectedSquare || !possibleMoves[selectedSquare]) return false;\r\n    return possibleMoves[selectedSquare].includes(position);\r\n  }, [selectedSquare, possibleMoves]);\r\n\r\n  // Generate the chess board with proper orientation\r\n  const renderBoard = () => {\r\n    const isFlipped = playerColor === 'black';\r\n    let rows = Array(8).fill(null).map((_, i) => i);\r\n    let cols = Array(8).fill(null).map((_, i) => i);\r\n    \r\n    if (isFlipped) {\r\n      rows = rows.reverse();\r\n      cols = cols.reverse();\r\n    }\r\n    \r\n    return (\r\n      <div className=\"chess-board\">\r\n        {rows.map(row => (\r\n          <div key={row} className=\"board-row\">\r\n            {cols.map(col => {\r\n              const isLightSquare = (row + col) % 2 === 0;\r\n              const algebraicPosition = coordsToAlgebraic(isFlipped ? 7 - row : row, isFlipped ? 7 - col : col);\r\n              const piece = board[isFlipped ? 7 - row : row][isFlipped ? 7 - col : col];\r\n              const isCheck = position && position.inCheck && piece && piece.type === 'king' && piece.color === position.inCheck;\r\n              \r\n              return (\r\n                <Square\r\n                  key={col}\r\n                  position={algebraicPosition}\r\n                  color={isLightSquare ? 'light' : 'dark'}\r\n                  onDrop={handleDrop}\r\n                  onClick={handleSquareClick}\r\n                  isPossibleMove={isPossibleMovePosition(algebraicPosition)}\r\n                  isCheck={isCheck}\r\n                >\r\n                  {piece && (\r\n                    <Piece\r\n                      piece={piece}\r\n                      position={algebraicPosition}\r\n                      canDrag={!disabled && piece.color === playerColor}\r\n                    />\r\n                  )}\r\n                </Square>\r\n              );\r\n            })}\r\n          </div>\r\n        ))}\r\n        \r\n        {/* Board coordinate labels */}\r\n        <div className=\"board-coordinates files\">\r\n          {isFlipped ? \r\n            ['h', 'g', 'f', 'e', 'd', 'c', 'b', 'a'].map(file => <div key={file}>{file}</div>) : \r\n            ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'].map(file => <div key={file}>{file}</div>)\r\n          }\r\n        </div>\r\n        <div className=\"board-coordinates ranks\">\r\n          {isFlipped ? \r\n            [1, 2, 3, 4, 5, 6, 7, 8].map(rank => <div key={rank}>{rank}</div>) : \r\n            [8, 7, 6, 5, 4, 3, 2, 1].map(rank => <div key={rank}>{rank}</div>)\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className={`board-container ${disabled ? 'disabled' : ''}`}>\r\n      {renderBoard()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}