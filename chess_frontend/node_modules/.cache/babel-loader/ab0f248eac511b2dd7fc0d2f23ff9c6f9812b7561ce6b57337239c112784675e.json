{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { useAuth } from '../context/AuthContext';\nimport { socket } from '../services/socket';\n\n/**\n * Custom hook to manage chess game state and socket communication\n * @param {string} gameId - The ID of the current game\n * @returns {Object} Chess game state and methods\n */\nconst useChess = gameId => {\n  _s();\n  const {\n    user\n  } = useAuth();\n\n  // Game state\n  const [board, setBoard] = useState(initialBoard());\n  const [position, setPosition] = useState(null);\n  const [moves, setMoves] = useState([]);\n  const [currentTurn, setCurrentTurn] = useState('white');\n  const [playerColor, setPlayerColor] = useState(null);\n  const [possibleMoves, setPossibleMoves] = useState({});\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [pastPositions, setPastPositions] = useState([]);\n  const [futurePositions, setFuturePositions] = useState([]);\n  const [inCheck, setInCheck] = useState(false);\n  const [gameStatus, setGameStatus] = useState({\n    isGameOver: false,\n    result: null\n  });\n\n  // Initialize game when component mounts\n  useEffect(() => {\n    if (!gameId) return;\n\n    // Join the game\n    socket.emit('game:join', {\n      gameId\n    });\n\n    // Handle initial game data\n    const handleGameData = data => {\n      if (!data) return;\n      setBoard(data.board || initialBoard());\n      setPosition(data.position || null);\n      setMoves(data.moves || []);\n      setCurrentTurn(data.currentTurn || 'white');\n\n      // Set player color based on the player's user ID\n      if (data.players && Array.isArray(data.players) && user) {\n        const playerData = data.players.find(p => p && p.id === user.id);\n        setPlayerColor((playerData === null || playerData === void 0 ? void 0 : playerData.color) || 'white');\n      }\n\n      // Update game status\n      setInCheck(data.inCheck || false);\n      setPossibleMoves(data.legalMoves || {});\n      if (data.gameOver) {\n        setGameStatus({\n          isGameOver: true,\n          result: data.result\n        });\n      }\n    };\n\n    // Listen for game updates\n    socket.on('game:update', data => {\n      if (!data) return;\n      console.log(\"Game update received:\", data.board, data.position);\n      setBoard(data.board || initialBoard());\n      setPosition(data.position || null);\n      setCurrentTurn(data.currentTurn || 'white');\n      setInCheck(data.inCheck || false);\n      setPossibleMoves(data.legalMoves || {});\n      if (data.lastMove) {\n        setMoves(prevMoves => [...prevMoves, data.lastMove]);\n      } else if (data.history) {\n        setMoves(data.history); // fallback khi undo hoáº·c khi join game\n      }\n      if (data.gameOver) {\n        setGameStatus({\n          isGameOver: true,\n          result: data.result\n        });\n      }\n    });\n\n    // Listen for game data when joining\n    socket.on('game:data', handleGameData);\n\n    // Listen for move validation failures\n    socket.on('game:moveRejected', error => {\n      console.error('Move rejected:', error);\n      // Reset any UI state needed after failed move\n    });\n\n    // Cleanup on unmount\n    return () => {\n      socket.off('game:update');\n      socket.off('game:data');\n      socket.off('game:moveRejected');\n      socket.off('game:undoDeclined');\n      socket.off('game:undoConfirmed');\n      socket.emit('game:leave', {\n        gameId\n      });\n    };\n  }, [gameId, user]);\n\n  // Handle undo declined event\n  useEffect(() => {\n    const handleUndoDeclined = data => {\n      if (!data) return;\n      alert(`${data.by || 'Opponent'} has declined the undo request.`);\n    };\n    socket.on('game:undoDeclined', handleUndoDeclined);\n    return () => {\n      socket.off('game:undoDeclined', handleUndoDeclined);\n    };\n  }, []);\n\n  // Handle undo confirmed event\n  useEffect(() => {\n    const handleUndoConfirmed = data => {\n      if (!data || !user) return;\n      const username = user.username || 'You';\n\n      // If we're the requester, ignore this event\n      if (data.by === username) return;\n      const accept = window.confirm(`${data.by || 'Opponent'} wants to undo the last move. Do you agree?`);\n      socket.emit('game:undoResponse', {\n        gameId,\n        accepted: accept\n      });\n    };\n    socket.on('game:undoConfirmed', handleUndoConfirmed);\n    return () => {\n      socket.off('game:undoConfirmed', handleUndoConfirmed);\n    };\n  }, [gameId, user]);\n\n  // Handle piece selection and move highlighting\n  const selectPiece = useCallback((piece, position) => {\n    // Only allow selection of the player's own pieces during their turn\n    if (piece && piece.color === playerColor && currentTurn === playerColor) {\n      setSelectedPiece({\n        piece,\n        position\n      });\n      // Highlight possible moves for this piece\n    } else {\n      setSelectedPiece(null);\n    }\n  }, [playerColor, currentTurn]);\n\n  // Make a move\n  const makeMove = useCallback((from, to) => {\n    if (gameStatus.isGameOver || currentTurn !== playerColor) {\n      return false;\n    }\n    setPastPositions(prev => [...prev, position]);\n    setFuturePositions([]);\n\n    // Send move to server\n    socket.emit('game:move', {\n      gameId,\n      from,\n      to\n    });\n    return true;\n  }, [gameId, currentTurn, playerColor, gameStatus.isGameOver, position]);\n\n  // Request undo\n  const undo = useCallback(() => {\n    if (!gameId || gameStatus.isGameOver || currentTurn !== playerColor) {\n      return false;\n    }\n\n    // Send undo request to the server\n    socket.emit('game:requestUndo', {\n      gameId\n    });\n\n    // Optionally, you can disable the undo button or show a loading state while waiting for the server response\n    return true;\n  }, [gameId, currentTurn, playerColor, gameStatus.isGameOver]);\n\n  // Handle redo (typically only for offline or analysis mode)\n  const redo = useCallback(() => {\n    if (futurePositions.length === 0) return;\n    const newPosition = futurePositions[futurePositions.length - 1];\n    setPastPositions(prev => [...prev, position]);\n    setFuturePositions(prev => prev.slice(0, -1));\n    setPosition(newPosition);\n\n    // Emit redo event to server if needed\n    socket.emit('game:redo', {\n      gameId,\n      position: newPosition\n    });\n  }, [futurePositions, position, gameId]);\n\n  // Reset game\n  const reset = useCallback(() => {\n    socket.emit('game:reset', {\n      gameId\n    });\n  }, [gameId]);\n  return {\n    board,\n    position,\n    currentTurn,\n    playerColor,\n    moves,\n    inCheck,\n    possibleMoves,\n    selectedPiece,\n    gameStatus,\n    selectPiece,\n    makeMove,\n    undo,\n    redo,\n    reset\n  };\n};\n\n// Helper function to create initial empty board\n_s(useChess, \"CeS88jW6I/GitJZ4bFdNINHnipg=\", false, function () {\n  return [useAuth];\n});\nfunction initialBoard() {\n  // Create 8x8 empty board representation\n  // This could be replaced with FEN parsing if you use chess.js or another library\n  return Array(8).fill().map(() => Array(8).fill(null));\n}\nexport default useChess;","map":{"version":3,"names":["useState","useEffect","useCallback","useAuth","socket","useChess","gameId","_s","user","board","setBoard","initialBoard","position","setPosition","moves","setMoves","currentTurn","setCurrentTurn","playerColor","setPlayerColor","possibleMoves","setPossibleMoves","selectedPiece","setSelectedPiece","pastPositions","setPastPositions","futurePositions","setFuturePositions","inCheck","setInCheck","gameStatus","setGameStatus","isGameOver","result","emit","handleGameData","data","players","Array","isArray","playerData","find","p","id","color","legalMoves","gameOver","on","console","log","lastMove","prevMoves","history","error","off","handleUndoDeclined","alert","by","handleUndoConfirmed","username","accept","window","confirm","accepted","selectPiece","piece","makeMove","from","to","prev","undo","redo","length","newPosition","slice","reset","fill","map"],"sources":["/home/sonbx/Documents/Project/Chess_Game/chess_frontend/src/hooks/useChess.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { useAuth } from '../context/AuthContext';\nimport { socket } from '../services/socket';\n\n/**\n * Custom hook to manage chess game state and socket communication\n * @param {string} gameId - The ID of the current game\n * @returns {Object} Chess game state and methods\n */\nconst useChess = (gameId) => {\n  const { user } = useAuth();\n  \n  // Game state\n  const [board, setBoard] = useState(initialBoard());\n  const [position, setPosition] = useState(null);\n  const [moves, setMoves] = useState([]);\n  const [currentTurn, setCurrentTurn] = useState('white');\n  const [playerColor, setPlayerColor] = useState(null);\n  const [possibleMoves, setPossibleMoves] = useState({});\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [pastPositions, setPastPositions] = useState([]);\n  const [futurePositions, setFuturePositions] = useState([]);\n  const [inCheck, setInCheck] = useState(false);\n  const [gameStatus, setGameStatus] = useState({\n    isGameOver: false,\n    result: null\n  });\n  \n  // Initialize game when component mounts\n  useEffect(() => {\n    if (!gameId) return;\n\n    // Join the game\n    socket.emit('game:join', { gameId });\n    \n    // Handle initial game data\n    const handleGameData = (data) => {\n      if (!data) return;\n      \n      setBoard(data.board || initialBoard());\n      setPosition(data.position || null);\n      setMoves(data.moves || []);\n      setCurrentTurn(data.currentTurn || 'white');\n      \n      // Set player color based on the player's user ID\n      if (data.players && Array.isArray(data.players) && user) {\n        const playerData = data.players.find(p => p && p.id === user.id);\n        setPlayerColor(playerData?.color || 'white');\n      }\n      \n      // Update game status\n      setInCheck(data.inCheck || false);\n      setPossibleMoves(data.legalMoves || {});\n\n      if (data.gameOver) {\n        setGameStatus({\n          isGameOver: true,\n          result: data.result\n        });\n      }\n    };\n\n    // Listen for game updates\n    socket.on('game:update', (data) => {\n      if (!data) return;\n      \n      console.log(\"Game update received:\", data.board, data.position);\n      setBoard(data.board || initialBoard());\n      setPosition(data.position || null);\n      setCurrentTurn(data.currentTurn || 'white');\n      setInCheck(data.inCheck || false);\n      setPossibleMoves(data.legalMoves || {});\n\n      if (data.lastMove) {\n        setMoves(prevMoves => [...prevMoves, data.lastMove]);\n      } else if (data.history) {\n        setMoves(data.history); // fallback khi undo hoáº·c khi join game\n      }\n      \n      if (data.gameOver) {\n        setGameStatus({\n          isGameOver: true,\n          result: data.result\n        });\n      }\n    });\n    \n    // Listen for game data when joining\n    socket.on('game:data', handleGameData);\n    \n    // Listen for move validation failures\n    socket.on('game:moveRejected', (error) => {\n      console.error('Move rejected:', error);\n      // Reset any UI state needed after failed move\n    });\n    \n    // Cleanup on unmount\n    return () => {\n      socket.off('game:update');\n      socket.off('game:data');\n      socket.off('game:moveRejected');\n      socket.off('game:undoDeclined');\n      socket.off('game:undoConfirmed');\n      socket.emit('game:leave', { gameId });\n    };\n  }, [gameId, user]);\n\n  // Handle undo declined event\n  useEffect(() => {\n    const handleUndoDeclined = (data) => {\n      if (!data) return;\n      alert(`${data.by || 'Opponent'} has declined the undo request.`);\n    };\n    \n    socket.on('game:undoDeclined', handleUndoDeclined);\n    \n    return () => {\n      socket.off('game:undoDeclined', handleUndoDeclined);\n    };\n  }, []);\n  \n  // Handle undo confirmed event\n  useEffect(() => {\n    const handleUndoConfirmed = (data) => {\n      if (!data || !user) return;\n      \n      const username = user.username || 'You';\n      \n      // If we're the requester, ignore this event\n      if (data.by === username) return;\n      \n      const accept = window.confirm(`${data.by || 'Opponent'} wants to undo the last move. Do you agree?`);\n      socket.emit('game:undoResponse', {\n        gameId,\n        accepted: accept\n      });\n    };\n    \n    socket.on('game:undoConfirmed', handleUndoConfirmed);\n    \n    return () => {\n      socket.off('game:undoConfirmed', handleUndoConfirmed);\n    };\n  }, [gameId, user]);\n  \n  // Handle piece selection and move highlighting\n  const selectPiece = useCallback((piece, position) => {\n    // Only allow selection of the player's own pieces during their turn\n    if (piece && piece.color === playerColor && currentTurn === playerColor) {\n      setSelectedPiece({ piece, position });\n      // Highlight possible moves for this piece\n    } else {\n      setSelectedPiece(null);\n    }\n  }, [playerColor, currentTurn]);\n  \n  // Make a move\n  const makeMove = useCallback((from, to) => {\n    if (gameStatus.isGameOver || currentTurn !== playerColor) {\n      return false;\n    }\n\n    setPastPositions(prev => [...prev, position]);\n    setFuturePositions([]);\n    \n    // Send move to server\n    socket.emit('game:move', {\n      gameId,\n      from,\n      to\n    });\n    \n    return true;\n  }, [gameId, currentTurn, playerColor, gameStatus.isGameOver, position]);\n  \n  // Request undo\n  const undo = useCallback(() => {\n    if (!gameId || gameStatus.isGameOver || currentTurn !== playerColor) {\n      return false;\n    }\n    \n    // Send undo request to the server\n    socket.emit('game:requestUndo', { gameId });\n  \n    // Optionally, you can disable the undo button or show a loading state while waiting for the server response\n    return true;\n  }, [gameId, currentTurn, playerColor, gameStatus.isGameOver]);\n\n  // Handle redo (typically only for offline or analysis mode)\n  const redo = useCallback(() => {\n    if (futurePositions.length === 0) return;\n    \n    const newPosition = futurePositions[futurePositions.length - 1];\n    setPastPositions(prev => [...prev, position]);\n    setFuturePositions(prev => prev.slice(0, -1));\n    setPosition(newPosition);\n    \n    // Emit redo event to server if needed\n    socket.emit('game:redo', { gameId, position: newPosition });\n  }, [futurePositions, position, gameId]);\n  \n  // Reset game\n  const reset = useCallback(() => {\n    socket.emit('game:reset', { gameId });\n  }, [gameId]);\n  \n  return {\n    board,\n    position,\n    currentTurn,\n    playerColor,\n    moves,\n    inCheck,\n    possibleMoves,\n    selectedPiece,\n    gameStatus,\n    selectPiece,\n    makeMove,\n    undo,\n    redo,\n    reset\n  };\n};\n\n// Helper function to create initial empty board\nfunction initialBoard() {\n  // Create 8x8 empty board representation\n  // This could be replaced with FEN parsing if you use chess.js or another library\n  return Array(8).fill().map(() => Array(8).fill(null));\n}\n\nexport default useChess;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}