{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { useAuth } from '../context/AuthContext';\nimport { socket } from '../services/socket';\n\n/**\r\n * Custom hook to manage chess game state and socket communication\r\n * @param {string} gameId - The ID of the current game\r\n * @returns {Object} Chess game state and methods\r\n */\nconst useChess = gameId => {\n  _s();\n  const {\n    user\n  } = useAuth();\n\n  // Game state\n  const [board, setBoard] = useState(initialBoard());\n  const [position, setPosition] = useState(null);\n  const [moves, setMoves] = useState([]);\n  const [currentTurn, setCurrentTurn] = useState('white');\n  const [playerColor, setPlayerColor] = useState(null);\n  const [possibleMoves, setPossibleMoves] = useState({});\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [inCheck, setInCheck] = useState(false);\n  const [gameStatus, setGameStatus] = useState({\n    isGameOver: false,\n    result: null\n  });\n\n  // Lịch sử nước đi cho undo/redo\n  const [history, setHistory] = useState([]);\n  const [currentIndex, setCurrentIndex] = useState(-1);\n\n  // Có thể undo nếu có ít nhất một nước đi trong lịch sử và không phải game over\n  const canUndo = currentIndex >= 0 && !(gameStatus !== null && gameStatus !== void 0 && gameStatus.isGameOver);\n\n  // Có thể redo nếu có nước đi trong lịch sử sau vị trí hiện tại\n  const canRedo = currentIndex < history.length - 1;\n\n  // Kết nối và xử lý dữ liệu game từ server\n  useEffect(() => {\n    if (!gameId) return;\n    console.log(\"Kết nối đến game:\", gameId);\n\n    // Join game room\n    socket.emit('game:join', {\n      gameId\n    });\n\n    // Kiểm tra kết nối socket\n    const onConnect = () => {\n      console.log(\"Socket đã kết nối thành công\");\n      socket.emit(\"game:join\", {\n        gameId\n      });\n    };\n    const onDisconnect = () => {\n      console.log(\"Socket đã mất kết nối\");\n    };\n    const onError = error => {\n      console.error(\"Lỗi socket:\", error);\n    };\n\n    // Xử lý dữ liệu game ban đầu\n    const handleGameData = data => {\n      var _data$players;\n      console.log(\"Nhận dữ liệu game ban đầu:\", data);\n      if (!data || !data.board) {\n        console.error(\"Dữ liệu game không hợp lệ:\", data);\n        return;\n      }\n      setBoard(data.board || initialBoard());\n      setPosition(data.position || null);\n      setMoves(data.moves || []);\n      setCurrentTurn(data.currentTurn || 'white');\n\n      // Set player color based on the player's user ID\n      const playerData = (_data$players = data.players) === null || _data$players === void 0 ? void 0 : _data$players.find(p => p.id === (user === null || user === void 0 ? void 0 : user.id));\n      setPlayerColor((playerData === null || playerData === void 0 ? void 0 : playerData.color) || 'white');\n\n      // Update game status\n      setInCheck(data.inCheck || false);\n      setPossibleMoves(data.legalMoves || {});\n      if (data.gameOver) {\n        setGameStatus({\n          isGameOver: true,\n          result: data.result\n        });\n      }\n\n      // Cập nhật lịch sử nước đi\n      if (data.history) {\n        setHistory(data.history);\n        setCurrentIndex(data.history.length - 1);\n      }\n    };\n\n    // Xử lý cập nhật game\n    const handleGameUpdate = data => {\n      var _data$position;\n      console.log(\"Nhận cập nhật game:\", data);\n      if (!data || !data.board) {\n        console.error(\"Dữ liệu cập nhật không hợp lệ:\", data);\n        return;\n      }\n      setBoard(data.board);\n      setPlayerColor(data.playerColor);\n      setCurrentTurn(data.currentTurn);\n      setPosition(data.position);\n      setPossibleMoves(data.legalMoves || data.possibleMoves || {});\n      setInCheck(!!((_data$position = data.position) !== null && _data$position !== void 0 && _data$position.inCheck) || data.inCheck || false);\n\n      // Cập nhật danh sách nước đi\n      if (data.lastMove) {\n        setMoves(prevMoves => [...prevMoves, data.lastMove]);\n      } else if (data.moves) {\n        setMoves(data.moves);\n      }\n\n      // Cập nhật lịch sử nước đi\n      if (data.history) {\n        setHistory(data.history);\n        setCurrentIndex(data.history.length - 1);\n      }\n\n      // Cập nhật trạng thái game nếu game đã kết thúc\n      if (data.gameOver) {\n        setGameStatus({\n          isGameOver: true,\n          result: data.result\n        });\n      }\n    };\n    const handleGameStatus = status => {\n      console.log(\"Nhận trạng thái game:\", status);\n      setGameStatus(status);\n    };\n\n    // Xử lý lỗi khi di chuyển\n    const handleMoveRejected = error => {\n      console.error('Nước đi bị từ chối:', error);\n      // Reset UI state sau khi di chuyển thất bại\n    };\n\n    // Đăng ký các sự kiện\n    socket.on(\"connect\", onConnect);\n    socket.on(\"disconnect\", onDisconnect);\n    socket.on(\"error\", onError);\n    socket.on(\"game:data\", handleGameData);\n    socket.on(\"game:update\", handleGameUpdate);\n    socket.on(\"game:status\", handleGameStatus);\n    socket.on(\"game:moveRejected\", handleMoveRejected);\n\n    // Kiểm tra nếu socket đã kết nối\n    if (socket.connected) {\n      console.log(\"Socket đã kết nối sẵn, gửi yêu cầu join game\");\n      socket.emit(\"game:join\", {\n        gameId\n      });\n    }\n\n    // Cleanup khi component unmount\n    return () => {\n      console.log(\"Hủy đăng ký các sự kiện socket\");\n      socket.off(\"connect\", onConnect);\n      socket.off(\"disconnect\", onDisconnect);\n      socket.off(\"error\", onError);\n      socket.off(\"game:data\", handleGameData);\n      socket.off(\"game:update\", handleGameUpdate);\n      socket.off(\"game:status\", handleGameStatus);\n      socket.off(\"game:moveRejected\", handleMoveRejected);\n      socket.emit(\"game:leave\", {\n        gameId\n      });\n    };\n  }, [gameId, user]);\n\n  // Chọn quân cờ\n  const selectPiece = useCallback((piece, position) => {\n    if (piece && piece.color === playerColor && currentTurn === playerColor) {\n      setSelectedPiece({\n        piece,\n        position\n      });\n    } else {\n      setSelectedPiece(null);\n    }\n  }, [playerColor, currentTurn]);\n\n  // Thực hiện nước đi\n  const makeMove = useCallback((from, to) => {\n    if (gameStatus.isGameOver || currentTurn !== playerColor) {\n      return false;\n    }\n    socket.emit(\"game:move\", {\n      gameId,\n      from,\n      to\n    });\n    return true;\n  }, [gameId, currentTurn, playerColor, gameStatus.isGameOver]);\n\n  // Undo nước đi\n  const undo = useCallback(() => {\n    if (canUndo) {\n      socket.emit(\"game:requestUndo\", {\n        gameId\n      });\n    }\n  }, [gameId, canUndo]);\n\n  // Redo nước đi\n  const redo = useCallback(() => {\n    if (canRedo) {\n      socket.emit(\"game:redo\", {\n        gameId\n      });\n    } else {\n      console.warn('Redo không khả dụng cho game trực tuyến');\n    }\n  }, [gameId, canRedo]);\n\n  // Reset game\n  const reset = useCallback(() => {\n    socket.emit(\"game:reset\", {\n      gameId\n    });\n  }, [gameId]);\n  return {\n    board,\n    position,\n    currentTurn,\n    playerColor,\n    moves,\n    inCheck,\n    possibleMoves,\n    selectedPiece,\n    gameStatus,\n    selectPiece,\n    makeMove,\n    undo,\n    redo,\n    reset,\n    canUndo,\n    canRedo\n  };\n};\n\n// Tạo bàn cờ ban đầu\n_s(useChess, \"eXXXVeutUnv/tfhXDh33chrahTI=\", false, function () {\n  return [useAuth];\n});\nfunction initialBoard() {\n  const board = Array(8).fill(null).map(() => Array(8).fill(null));\n\n  // Có thể thêm mã khởi tạo quân cờ ở đây nếu cần\n  // Ví dụ cho phiên bản debug:\n  /*\r\n  // Thêm quân tốt\r\n  for (let i = 0; i < 8; i++) {\r\n    board[1][i] = { type: 'p', color: 'black' };\r\n    board[6][i] = { type: 'p', color: 'white' };\r\n  }\r\n  \r\n  // Thêm quân khác\r\n  const backRow = ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'];\r\n  for (let i = 0; i < 8; i++) {\r\n    board[0][i] = { type: backRow[i], color: 'black' };\r\n    board[7][i] = { type: backRow[i], color: 'white' };\r\n  }\r\n  */\n\n  return board;\n}\nexport default useChess;","map":{"version":3,"names":["useState","useEffect","useCallback","useAuth","socket","useChess","gameId","_s","user","board","setBoard","initialBoard","position","setPosition","moves","setMoves","currentTurn","setCurrentTurn","playerColor","setPlayerColor","possibleMoves","setPossibleMoves","selectedPiece","setSelectedPiece","inCheck","setInCheck","gameStatus","setGameStatus","isGameOver","result","history","setHistory","currentIndex","setCurrentIndex","canUndo","canRedo","length","console","log","emit","onConnect","onDisconnect","onError","error","handleGameData","data","_data$players","playerData","players","find","p","id","color","legalMoves","gameOver","handleGameUpdate","_data$position","lastMove","prevMoves","handleGameStatus","status","handleMoveRejected","on","connected","off","selectPiece","piece","makeMove","from","to","undo","redo","warn","reset","Array","fill","map"],"sources":["C:/Users/sonbx/Chess_Game/chess_frontend/src/hooks/useChess.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\nimport { useAuth } from '../context/AuthContext';\r\nimport { socket } from '../services/socket';\r\n\r\n/**\r\n * Custom hook to manage chess game state and socket communication\r\n * @param {string} gameId - The ID of the current game\r\n * @returns {Object} Chess game state and methods\r\n */\r\nconst useChess = (gameId) => {\r\n  const { user } = useAuth();\r\n  \r\n  // Game state\r\n  const [board, setBoard] = useState(initialBoard());\r\n  const [position, setPosition] = useState(null);\r\n  const [moves, setMoves] = useState([]);\r\n  const [currentTurn, setCurrentTurn] = useState('white');\r\n  const [playerColor, setPlayerColor] = useState(null);\r\n  const [possibleMoves, setPossibleMoves] = useState({});\r\n  const [selectedPiece, setSelectedPiece] = useState(null);\r\n  const [inCheck, setInCheck] = useState(false);\r\n  const [gameStatus, setGameStatus] = useState({\r\n    isGameOver: false,\r\n    result: null\r\n  });\r\n  \r\n  // Lịch sử nước đi cho undo/redo\r\n  const [history, setHistory] = useState([]);\r\n  const [currentIndex, setCurrentIndex] = useState(-1);\r\n  \r\n  // Có thể undo nếu có ít nhất một nước đi trong lịch sử và không phải game over\r\n  const canUndo = currentIndex >= 0 && !gameStatus?.isGameOver;\r\n  \r\n  // Có thể redo nếu có nước đi trong lịch sử sau vị trí hiện tại\r\n  const canRedo = currentIndex < history.length - 1;\r\n  \r\n  // Kết nối và xử lý dữ liệu game từ server\r\n  useEffect(() => {\r\n    if (!gameId) return;\r\n    \r\n    console.log(\"Kết nối đến game:\", gameId);\r\n    \r\n    // Join game room\r\n    socket.emit('game:join', { gameId });\r\n    \r\n    // Kiểm tra kết nối socket\r\n    const onConnect = () => {\r\n      console.log(\"Socket đã kết nối thành công\");\r\n      socket.emit(\"game:join\", { gameId });\r\n    };\r\n    \r\n    const onDisconnect = () => {\r\n      console.log(\"Socket đã mất kết nối\");\r\n    };\r\n    \r\n    const onError = (error) => {\r\n      console.error(\"Lỗi socket:\", error);\r\n    };\r\n    \r\n    // Xử lý dữ liệu game ban đầu\r\n    const handleGameData = (data) => {\r\n      console.log(\"Nhận dữ liệu game ban đầu:\", data);\r\n      \r\n      if (!data || !data.board) {\r\n        console.error(\"Dữ liệu game không hợp lệ:\", data);\r\n        return;\r\n      }\r\n      \r\n      setBoard(data.board || initialBoard());\r\n      setPosition(data.position || null);\r\n      setMoves(data.moves || []);\r\n      setCurrentTurn(data.currentTurn || 'white');\r\n      \r\n      // Set player color based on the player's user ID\r\n      const playerData = data.players?.find(p => p.id === user?.id);\r\n      setPlayerColor(playerData?.color || 'white');\r\n      \r\n      // Update game status\r\n      setInCheck(data.inCheck || false);\r\n      setPossibleMoves(data.legalMoves || {});\r\n      \r\n      if (data.gameOver) {\r\n        setGameStatus({\r\n          isGameOver: true,\r\n          result: data.result\r\n        });\r\n      }\r\n      \r\n      // Cập nhật lịch sử nước đi\r\n      if (data.history) {\r\n        setHistory(data.history);\r\n        setCurrentIndex(data.history.length - 1);\r\n      }\r\n    };\r\n    \r\n    // Xử lý cập nhật game\r\n    const handleGameUpdate = (data) => {\r\n      console.log(\"Nhận cập nhật game:\", data);\r\n      \r\n      if (!data || !data.board) {\r\n        console.error(\"Dữ liệu cập nhật không hợp lệ:\", data);\r\n        return;\r\n      }\r\n      \r\n      setBoard(data.board);\r\n      setPlayerColor(data.playerColor);\r\n      setCurrentTurn(data.currentTurn);\r\n      setPosition(data.position);\r\n      setPossibleMoves(data.legalMoves || data.possibleMoves || {});\r\n      setInCheck(!!data.position?.inCheck || data.inCheck || false);\r\n      \r\n      // Cập nhật danh sách nước đi\r\n      if (data.lastMove) {\r\n        setMoves(prevMoves => [...prevMoves, data.lastMove]);\r\n      } else if (data.moves) {\r\n        setMoves(data.moves);\r\n      }\r\n      \r\n      // Cập nhật lịch sử nước đi\r\n      if (data.history) {\r\n        setHistory(data.history);\r\n        setCurrentIndex(data.history.length - 1);\r\n      }\r\n      \r\n      // Cập nhật trạng thái game nếu game đã kết thúc\r\n      if (data.gameOver) {\r\n        setGameStatus({\r\n          isGameOver: true,\r\n          result: data.result\r\n        });\r\n      }\r\n    };\r\n    \r\n    const handleGameStatus = (status) => {\r\n      console.log(\"Nhận trạng thái game:\", status);\r\n      setGameStatus(status);\r\n    };\r\n    \r\n    // Xử lý lỗi khi di chuyển\r\n    const handleMoveRejected = (error) => {\r\n      console.error('Nước đi bị từ chối:', error);\r\n      // Reset UI state sau khi di chuyển thất bại\r\n    };\r\n    \r\n    // Đăng ký các sự kiện\r\n    socket.on(\"connect\", onConnect);\r\n    socket.on(\"disconnect\", onDisconnect);\r\n    socket.on(\"error\", onError);\r\n    socket.on(\"game:data\", handleGameData);\r\n    socket.on(\"game:update\", handleGameUpdate);\r\n    socket.on(\"game:status\", handleGameStatus);\r\n    socket.on(\"game:moveRejected\", handleMoveRejected);\r\n    \r\n    // Kiểm tra nếu socket đã kết nối\r\n    if (socket.connected) {\r\n      console.log(\"Socket đã kết nối sẵn, gửi yêu cầu join game\");\r\n      socket.emit(\"game:join\", { gameId });\r\n    }\r\n    \r\n    // Cleanup khi component unmount\r\n    return () => {\r\n      console.log(\"Hủy đăng ký các sự kiện socket\");\r\n      socket.off(\"connect\", onConnect);\r\n      socket.off(\"disconnect\", onDisconnect);\r\n      socket.off(\"error\", onError);\r\n      socket.off(\"game:data\", handleGameData);\r\n      socket.off(\"game:update\", handleGameUpdate);\r\n      socket.off(\"game:status\", handleGameStatus);\r\n      socket.off(\"game:moveRejected\", handleMoveRejected);\r\n      socket.emit(\"game:leave\", { gameId });\r\n    };\r\n  }, [gameId, user]);\r\n  \r\n  // Chọn quân cờ\r\n  const selectPiece = useCallback((piece, position) => {\r\n    if (piece && piece.color === playerColor && currentTurn === playerColor) {\r\n      setSelectedPiece({ piece, position });\r\n    } else {\r\n      setSelectedPiece(null);\r\n    }\r\n  }, [playerColor, currentTurn]);\r\n  \r\n  // Thực hiện nước đi\r\n  const makeMove = useCallback((from, to) => {\r\n    if (gameStatus.isGameOver || currentTurn !== playerColor) {\r\n      return false;\r\n    }\r\n    \r\n    socket.emit(\"game:move\", { gameId, from, to });\r\n    return true;\r\n  }, [gameId, currentTurn, playerColor, gameStatus.isGameOver]);\r\n  \r\n  // Undo nước đi\r\n  const undo = useCallback(() => {\r\n    if (canUndo) {\r\n      socket.emit(\"game:requestUndo\", { gameId });\r\n    }\r\n  }, [gameId, canUndo]);\r\n  \r\n  // Redo nước đi\r\n  const redo = useCallback(() => {\r\n    if (canRedo) {\r\n      socket.emit(\"game:redo\", { gameId });\r\n    } else {\r\n      console.warn('Redo không khả dụng cho game trực tuyến');\r\n    }\r\n  }, [gameId, canRedo]);\r\n  \r\n  // Reset game\r\n  const reset = useCallback(() => {\r\n    socket.emit(\"game:reset\", { gameId });\r\n  }, [gameId]);\r\n  \r\n  return {\r\n    board,\r\n    position,\r\n    currentTurn,\r\n    playerColor,\r\n    moves,\r\n    inCheck,\r\n    possibleMoves,\r\n    selectedPiece,\r\n    gameStatus,\r\n    selectPiece,\r\n    makeMove,\r\n    undo,\r\n    redo,\r\n    reset,\r\n    canUndo,\r\n    canRedo\r\n  };\r\n};\r\n\r\n// Tạo bàn cờ ban đầu\r\nfunction initialBoard() {\r\n  const board = Array(8).fill(null).map(() => Array(8).fill(null));\r\n  \r\n  // Có thể thêm mã khởi tạo quân cờ ở đây nếu cần\r\n  // Ví dụ cho phiên bản debug:\r\n  /*\r\n  // Thêm quân tốt\r\n  for (let i = 0; i < 8; i++) {\r\n    board[1][i] = { type: 'p', color: 'black' };\r\n    board[6][i] = { type: 'p', color: 'white' };\r\n  }\r\n  \r\n  // Thêm quân khác\r\n  const backRow = ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'];\r\n  for (let i = 0; i < 8; i++) {\r\n    board[0][i] = { type: backRow[i], color: 'black' };\r\n    board[7][i] = { type: backRow[i], color: 'white' };\r\n  }\r\n  */\r\n  \r\n  return board;\r\n}\r\n\r\nexport default useChess;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACxD,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,MAAM,QAAQ,oBAAoB;;AAE3C;AACA;AACA;AACA;AACA;AACA,MAAMC,QAAQ,GAAIC,MAAM,IAAK;EAAAC,EAAA;EAC3B,MAAM;IAAEC;EAAK,CAAC,GAAGL,OAAO,CAAC,CAAC;;EAE1B;EACA,MAAM,CAACM,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAACW,YAAY,CAAC,CAAC,CAAC;EAClD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACgB,WAAW,EAAEC,cAAc,CAAC,GAAGjB,QAAQ,CAAC,OAAO,CAAC;EACvD,MAAM,CAACkB,WAAW,EAAEC,cAAc,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACoB,aAAa,EAAEC,gBAAgB,CAAC,GAAGrB,QAAQ,CAAC,CAAC,CAAC,CAAC;EACtD,MAAM,CAACsB,aAAa,EAAEC,gBAAgB,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACwB,OAAO,EAAEC,UAAU,CAAC,GAAGzB,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAAC0B,UAAU,EAAEC,aAAa,CAAC,GAAG3B,QAAQ,CAAC;IAC3C4B,UAAU,EAAE,KAAK;IACjBC,MAAM,EAAE;EACV,CAAC,CAAC;;EAEF;EACA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAG/B,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACgC,YAAY,EAAEC,eAAe,CAAC,GAAGjC,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEpD;EACA,MAAMkC,OAAO,GAAGF,YAAY,IAAI,CAAC,IAAI,EAACN,UAAU,aAAVA,UAAU,eAAVA,UAAU,CAAEE,UAAU;;EAE5D;EACA,MAAMO,OAAO,GAAGH,YAAY,GAAGF,OAAO,CAACM,MAAM,GAAG,CAAC;;EAEjD;EACAnC,SAAS,CAAC,MAAM;IACd,IAAI,CAACK,MAAM,EAAE;IAEb+B,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEhC,MAAM,CAAC;;IAExC;IACAF,MAAM,CAACmC,IAAI,CAAC,WAAW,EAAE;MAAEjC;IAAO,CAAC,CAAC;;IAEpC;IACA,MAAMkC,SAAS,GAAGA,CAAA,KAAM;MACtBH,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;MAC3ClC,MAAM,CAACmC,IAAI,CAAC,WAAW,EAAE;QAAEjC;MAAO,CAAC,CAAC;IACtC,CAAC;IAED,MAAMmC,YAAY,GAAGA,CAAA,KAAM;MACzBJ,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;IACtC,CAAC;IAED,MAAMI,OAAO,GAAIC,KAAK,IAAK;MACzBN,OAAO,CAACM,KAAK,CAAC,aAAa,EAAEA,KAAK,CAAC;IACrC,CAAC;;IAED;IACA,MAAMC,cAAc,GAAIC,IAAI,IAAK;MAAA,IAAAC,aAAA;MAC/BT,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEO,IAAI,CAAC;MAE/C,IAAI,CAACA,IAAI,IAAI,CAACA,IAAI,CAACpC,KAAK,EAAE;QACxB4B,OAAO,CAACM,KAAK,CAAC,4BAA4B,EAAEE,IAAI,CAAC;QACjD;MACF;MAEAnC,QAAQ,CAACmC,IAAI,CAACpC,KAAK,IAAIE,YAAY,CAAC,CAAC,CAAC;MACtCE,WAAW,CAACgC,IAAI,CAACjC,QAAQ,IAAI,IAAI,CAAC;MAClCG,QAAQ,CAAC8B,IAAI,CAAC/B,KAAK,IAAI,EAAE,CAAC;MAC1BG,cAAc,CAAC4B,IAAI,CAAC7B,WAAW,IAAI,OAAO,CAAC;;MAE3C;MACA,MAAM+B,UAAU,IAAAD,aAAA,GAAGD,IAAI,CAACG,OAAO,cAAAF,aAAA,uBAAZA,aAAA,CAAcG,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,MAAK3C,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAE2C,EAAE,EAAC;MAC7DhC,cAAc,CAAC,CAAA4B,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEK,KAAK,KAAI,OAAO,CAAC;;MAE5C;MACA3B,UAAU,CAACoB,IAAI,CAACrB,OAAO,IAAI,KAAK,CAAC;MACjCH,gBAAgB,CAACwB,IAAI,CAACQ,UAAU,IAAI,CAAC,CAAC,CAAC;MAEvC,IAAIR,IAAI,CAACS,QAAQ,EAAE;QACjB3B,aAAa,CAAC;UACZC,UAAU,EAAE,IAAI;UAChBC,MAAM,EAAEgB,IAAI,CAAChB;QACf,CAAC,CAAC;MACJ;;MAEA;MACA,IAAIgB,IAAI,CAACf,OAAO,EAAE;QAChBC,UAAU,CAACc,IAAI,CAACf,OAAO,CAAC;QACxBG,eAAe,CAACY,IAAI,CAACf,OAAO,CAACM,MAAM,GAAG,CAAC,CAAC;MAC1C;IACF,CAAC;;IAED;IACA,MAAMmB,gBAAgB,GAAIV,IAAI,IAAK;MAAA,IAAAW,cAAA;MACjCnB,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEO,IAAI,CAAC;MAExC,IAAI,CAACA,IAAI,IAAI,CAACA,IAAI,CAACpC,KAAK,EAAE;QACxB4B,OAAO,CAACM,KAAK,CAAC,gCAAgC,EAAEE,IAAI,CAAC;QACrD;MACF;MAEAnC,QAAQ,CAACmC,IAAI,CAACpC,KAAK,CAAC;MACpBU,cAAc,CAAC0B,IAAI,CAAC3B,WAAW,CAAC;MAChCD,cAAc,CAAC4B,IAAI,CAAC7B,WAAW,CAAC;MAChCH,WAAW,CAACgC,IAAI,CAACjC,QAAQ,CAAC;MAC1BS,gBAAgB,CAACwB,IAAI,CAACQ,UAAU,IAAIR,IAAI,CAACzB,aAAa,IAAI,CAAC,CAAC,CAAC;MAC7DK,UAAU,CAAC,CAAC,GAAA+B,cAAA,GAACX,IAAI,CAACjC,QAAQ,cAAA4C,cAAA,eAAbA,cAAA,CAAehC,OAAO,KAAIqB,IAAI,CAACrB,OAAO,IAAI,KAAK,CAAC;;MAE7D;MACA,IAAIqB,IAAI,CAACY,QAAQ,EAAE;QACjB1C,QAAQ,CAAC2C,SAAS,IAAI,CAAC,GAAGA,SAAS,EAAEb,IAAI,CAACY,QAAQ,CAAC,CAAC;MACtD,CAAC,MAAM,IAAIZ,IAAI,CAAC/B,KAAK,EAAE;QACrBC,QAAQ,CAAC8B,IAAI,CAAC/B,KAAK,CAAC;MACtB;;MAEA;MACA,IAAI+B,IAAI,CAACf,OAAO,EAAE;QAChBC,UAAU,CAACc,IAAI,CAACf,OAAO,CAAC;QACxBG,eAAe,CAACY,IAAI,CAACf,OAAO,CAACM,MAAM,GAAG,CAAC,CAAC;MAC1C;;MAEA;MACA,IAAIS,IAAI,CAACS,QAAQ,EAAE;QACjB3B,aAAa,CAAC;UACZC,UAAU,EAAE,IAAI;UAChBC,MAAM,EAAEgB,IAAI,CAAChB;QACf,CAAC,CAAC;MACJ;IACF,CAAC;IAED,MAAM8B,gBAAgB,GAAIC,MAAM,IAAK;MACnCvB,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEsB,MAAM,CAAC;MAC5CjC,aAAa,CAACiC,MAAM,CAAC;IACvB,CAAC;;IAED;IACA,MAAMC,kBAAkB,GAAIlB,KAAK,IAAK;MACpCN,OAAO,CAACM,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C;IACF,CAAC;;IAED;IACAvC,MAAM,CAAC0D,EAAE,CAAC,SAAS,EAAEtB,SAAS,CAAC;IAC/BpC,MAAM,CAAC0D,EAAE,CAAC,YAAY,EAAErB,YAAY,CAAC;IACrCrC,MAAM,CAAC0D,EAAE,CAAC,OAAO,EAAEpB,OAAO,CAAC;IAC3BtC,MAAM,CAAC0D,EAAE,CAAC,WAAW,EAAElB,cAAc,CAAC;IACtCxC,MAAM,CAAC0D,EAAE,CAAC,aAAa,EAAEP,gBAAgB,CAAC;IAC1CnD,MAAM,CAAC0D,EAAE,CAAC,aAAa,EAAEH,gBAAgB,CAAC;IAC1CvD,MAAM,CAAC0D,EAAE,CAAC,mBAAmB,EAAED,kBAAkB,CAAC;;IAElD;IACA,IAAIzD,MAAM,CAAC2D,SAAS,EAAE;MACpB1B,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC;MAC3DlC,MAAM,CAACmC,IAAI,CAAC,WAAW,EAAE;QAAEjC;MAAO,CAAC,CAAC;IACtC;;IAEA;IACA,OAAO,MAAM;MACX+B,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;MAC7ClC,MAAM,CAAC4D,GAAG,CAAC,SAAS,EAAExB,SAAS,CAAC;MAChCpC,MAAM,CAAC4D,GAAG,CAAC,YAAY,EAAEvB,YAAY,CAAC;MACtCrC,MAAM,CAAC4D,GAAG,CAAC,OAAO,EAAEtB,OAAO,CAAC;MAC5BtC,MAAM,CAAC4D,GAAG,CAAC,WAAW,EAAEpB,cAAc,CAAC;MACvCxC,MAAM,CAAC4D,GAAG,CAAC,aAAa,EAAET,gBAAgB,CAAC;MAC3CnD,MAAM,CAAC4D,GAAG,CAAC,aAAa,EAAEL,gBAAgB,CAAC;MAC3CvD,MAAM,CAAC4D,GAAG,CAAC,mBAAmB,EAAEH,kBAAkB,CAAC;MACnDzD,MAAM,CAACmC,IAAI,CAAC,YAAY,EAAE;QAAEjC;MAAO,CAAC,CAAC;IACvC,CAAC;EACH,CAAC,EAAE,CAACA,MAAM,EAAEE,IAAI,CAAC,CAAC;;EAElB;EACA,MAAMyD,WAAW,GAAG/D,WAAW,CAAC,CAACgE,KAAK,EAAEtD,QAAQ,KAAK;IACnD,IAAIsD,KAAK,IAAIA,KAAK,CAACd,KAAK,KAAKlC,WAAW,IAAIF,WAAW,KAAKE,WAAW,EAAE;MACvEK,gBAAgB,CAAC;QAAE2C,KAAK;QAAEtD;MAAS,CAAC,CAAC;IACvC,CAAC,MAAM;MACLW,gBAAgB,CAAC,IAAI,CAAC;IACxB;EACF,CAAC,EAAE,CAACL,WAAW,EAAEF,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAMmD,QAAQ,GAAGjE,WAAW,CAAC,CAACkE,IAAI,EAAEC,EAAE,KAAK;IACzC,IAAI3C,UAAU,CAACE,UAAU,IAAIZ,WAAW,KAAKE,WAAW,EAAE;MACxD,OAAO,KAAK;IACd;IAEAd,MAAM,CAACmC,IAAI,CAAC,WAAW,EAAE;MAAEjC,MAAM;MAAE8D,IAAI;MAAEC;IAAG,CAAC,CAAC;IAC9C,OAAO,IAAI;EACb,CAAC,EAAE,CAAC/D,MAAM,EAAEU,WAAW,EAAEE,WAAW,EAAEQ,UAAU,CAACE,UAAU,CAAC,CAAC;;EAE7D;EACA,MAAM0C,IAAI,GAAGpE,WAAW,CAAC,MAAM;IAC7B,IAAIgC,OAAO,EAAE;MACX9B,MAAM,CAACmC,IAAI,CAAC,kBAAkB,EAAE;QAAEjC;MAAO,CAAC,CAAC;IAC7C;EACF,CAAC,EAAE,CAACA,MAAM,EAAE4B,OAAO,CAAC,CAAC;;EAErB;EACA,MAAMqC,IAAI,GAAGrE,WAAW,CAAC,MAAM;IAC7B,IAAIiC,OAAO,EAAE;MACX/B,MAAM,CAACmC,IAAI,CAAC,WAAW,EAAE;QAAEjC;MAAO,CAAC,CAAC;IACtC,CAAC,MAAM;MACL+B,OAAO,CAACmC,IAAI,CAAC,yCAAyC,CAAC;IACzD;EACF,CAAC,EAAE,CAAClE,MAAM,EAAE6B,OAAO,CAAC,CAAC;;EAErB;EACA,MAAMsC,KAAK,GAAGvE,WAAW,CAAC,MAAM;IAC9BE,MAAM,CAACmC,IAAI,CAAC,YAAY,EAAE;MAAEjC;IAAO,CAAC,CAAC;EACvC,CAAC,EAAE,CAACA,MAAM,CAAC,CAAC;EAEZ,OAAO;IACLG,KAAK;IACLG,QAAQ;IACRI,WAAW;IACXE,WAAW;IACXJ,KAAK;IACLU,OAAO;IACPJ,aAAa;IACbE,aAAa;IACbI,UAAU;IACVuC,WAAW;IACXE,QAAQ;IACRG,IAAI;IACJC,IAAI;IACJE,KAAK;IACLvC,OAAO;IACPC;EACF,CAAC;AACH,CAAC;;AAED;AAAA5B,EAAA,CAhOMF,QAAQ;EAAA,QACKF,OAAO;AAAA;AAgO1B,SAASQ,YAAYA,CAAA,EAAG;EACtB,MAAMF,KAAK,GAAGiE,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAACC,GAAG,CAAC,MAAMF,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;;EAEhE;EACA;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE,OAAOlE,KAAK;AACd;AAEA,eAAeJ,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}